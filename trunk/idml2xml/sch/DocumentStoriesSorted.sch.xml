<?xml version="1.0" encoding="utf-8"?>
<s:schema
  xmlns:s="http://purl.oclc.org/dsdl/schematron"
  xmlns:aid   = "http://ns.adobe.com/AdobeInDesign/4.0/"
  xmlns:aid5  = "http://ns.adobe.com/AdobeInDesign/5.0/"
  xmlns:idPkg = "http://ns.adobe.com/AdobeInDesign/idml/1.0/packaging"
  xmlns:idml2xml  = "http://www.le-tex.de/namespace/idml2xml"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  queryBinding="xslt2" 
  defaultPhase="#ALL">

  <s:ns prefix="aid" uri="http://ns.adobe.com/AdobeInDesign/4.0/" />
  <s:ns prefix="aid5" uri="http://ns.adobe.com/AdobeInDesign/5.0/" />
  <s:ns prefix="idPkg" uri="http://ns.adobe.com/AdobeInDesign/idml/1.0/packaging" />
  <s:ns prefix="idml2xml" uri="http://www.le-tex.de/namespace/idml2xml" />

  <s:title>Sample ISO Schematron rules for idml2xml content checking</s:title>

  <s:p>Copyright (C) 2012, le-tex publishing services GmbH</s:p>

  <s:let name="top-level-frames" value="/Document/TextFrame/@Self"/>

  <s:let name="multiple-top-level-frames" 
    value="xs:string(
             if (string-join(/Document/XmlStory//Content, '') eq '&#xfeff;') (: default XmlStory without actual content :)
               then count($top-level-frames) gt 0
               else count($top-level-frames) gt 1
           )"/>
  <s:pattern id="unanchored">
    <s:rule context="/Document">
      <s:report test="$multiple-top-level-frames eq 'true'" id="DocumentStoriesSorted_001" role="WRN">
        The document contains <s:value-of select="count(TextFrame)"/> top-level TextFrames. Please check anchoring.</s:report>
    </s:rule>
	
		  
    <s:rule context="TextFrame[@Self = $top-level-frames]">
      <s:report test="$multiple-top-level-frames eq 'true' and ./Story[@AppliedTOCStyle = 'n']" 
        id="DocumentStoriesSorted_001" role="WRN">
        <s:span class="srcpath"><xsl:value-of select="(.//*/@srcpath)[1]"/></s:span>
        This frame is not anchored. You can ignore this message if it contains the main story.</s:report>
    </s:rule>
  </s:pattern>
  
  
   <s:pattern id="empty-line">
   		<s:rule context="Br">
		<s:let name="test" value="following-sibling::*[1]"/>
		<s:report test="following-sibling::*[1] eq ." id="DocumentStoriesSorted_002" role="WRN">
			<s:span class="srcpath"><xsl:value-of select="./parent::CharacterStyleRange[1]/parent::ParagraphStyleRange[1]/@srcpath"/></s:span>
			Empty lines are not implemented via paragraph styles!
		</s:report>

    </s:rule>
 </s:pattern>
 
  <s:pattern id="hyperlink">
    <s:rule context="Content[not(./parent::HyperlinkTextSource[1])]">

		
		<s:report test="(contains(., 'www'))" id="DocumentStoriesSorted_003a" role="WRN">
			<s:span class="srcpath"><xsl:value-of select="(parent::CharacterStyleRange[1]/parent::ParagraphStyleRange[1]/@srcpath)[1]"/></s:span>
			www without Hyperlink!
		</s:report>
	 
 		<s:report test="(contains(.,'http://'))" id="DocumentStoriesSorted_003b" role="WRN">
			<s:span class="srcpath"><xsl:value-of select="(parent::CharacterStyleRange[1]/parent::ParagraphStyleRange[1]/@srcpath)[1]"/></s:span>
			http without Hyperlink:
		</s:report>
		
    </s:rule>

  </s:pattern>	
	

<s:pattern id="lists">
    <s:rule context="Content[not(./parent::CharacterStyleRange/parent::ParagraphStyleRange/parent::Footnote)]">
		<s:let name="listcontent" value="following-sibling::Content[1]"/>
		<s:let name="listsymbol" value="replace( ., '([^\s]{1}).*','$1')"/>
		<s:let name="listsymbol-type" value="xs:integer(
             if (matches($listsymbol, '[A-z]'))
               then 0
               else 1
           )"/> 
		<s:let name="tab" value="parent::CharacterStyleRange[1]/following-sibling::CharacterStyleRange[1]/@AppliedCharacterStyle"/>
		<s:let name="tab-content" value="parent::CharacterStyleRange[1]/following-sibling::CharacterStyleRange[2]"/>
		<s:let name="tab-content2" value="replace( parent::CharacterStyleRange[1]/parent::ParagraphStyleRange[1]/following-sibling::ParagraphStyleRange[1]/CharacterStyleRange[1]/Content[1], '(^[\s]+).*','$1')"/>

		<s:report test="(starts-with(., '1.') and (starts-with($listcontent, '2.')))" id="DocumentStoriesSorted_005" role="WRN">
			<s:span class="srcpath"><xsl:value-of select="parent::CharacterStyleRange[1]/parent::ParagraphStyleRange[1]/@srcpath"/></s:span>
			Static list item, please use numerated lists!</s:report>
		<s:report test="(starts-with(., '1.') and ($tab eq 'CharacterStyle/tab'))" id="DocumentStoriesSorted_005b" role="WRN">
			<s:span class="srcpath"><xsl:value-of select="parent::CharacterStyleRange[1]/parent::ParagraphStyleRange[1]/@srcpath"/></s:span>
			Static tabbed list, please use numerated lists!</s:report>	  
		
	    <s:report test="(starts-with(., 'a)') and (starts-with($listcontent, 'b)')))" id="DocumentStoriesSorted_005c" role="WRN">
			<s:span class="srcpath"><xsl:value-of select="parent::CharacterStyleRange[1]/parent::ParagraphStyleRange[1]/@srcpath"/></s:span>
			Static list item, please use numerated lists!</s:report>
		<s:report test="(starts-with(., 'a)') and ($tab eq 'CharacterStyle/tab'))" id="DocumentStoriesSorted_005d" role="WRN">
			<s:span class="srcpath"><xsl:value-of select="parent::CharacterStyleRange[1]/parent::ParagraphStyleRange[1]/@srcpath"/></s:span>
			Static tabbed list item, please use numerated lists!</s:report>
		
		<s:report test="(starts-with(., '•') and (starts-with($listcontent, '•')))" id="DocumentStoriesSorted_005e" role="WRN">
			<s:span class="srcpath"><xsl:value-of select="parent::CharacterStyleRange[1]/parent::ParagraphStyleRange[1]/@srcpath"/></s:span>
			Static unordered list item, please use real unordered lists!</s:report>
		<s:report test="(starts-with(., '•')and ($tab eq 'CharacterStyle/tab'))" id="DocumentStoriesSorted_005f" role="WRN">
			<s:span class="srcpath"><xsl:value-of select="parent::CharacterStyleRange[1]/parent::ParagraphStyleRange[1]/@srcpath"/></s:span>
			Static tabbed unordered list item, please use real unordered lists!</s:report>
 
		<s:report test="(starts-with(., $listsymbol) and ($tab eq 'CharacterStyle/tab') and not(starts-with(., '•')) and ($listsymbol eq $tab-content2) and ($listsymbol-type eq 1))" id="DocumentStoriesSorted_005g" role="WRN">
			<s:span class="srcpath"><xsl:value-of select="parent::CharacterStyleRange[1]/parent::ParagraphStyleRange[1]/@srcpath"/></s:span>
			Static tabbed unordered list item, please use real unordered lists!</s:report>
	
		<s:report test="(starts-with(., $listsymbol) and (starts-with($listcontent, $listsymbol)) and ($listsymbol-type eq 1) and not(processing-intruction))" id="DocumentStoriesSorted_005h" role="WRN">
			<s:span class="srcpath"><xsl:value-of select="parent::CharacterStyleRange[1]/parent::ParagraphStyleRange[1]/@srcpath"/></s:span>
			Static tabbed unordered list item, please use real unordered lists!</s:report>
	</s:rule>
 </s:pattern>
 
  <s:pattern id="graphic-object">
       <s:rule context="PathGeometry[parent::Properties[1]/parent::*[1][local-name() = ('Polygon', 'Rectangle', 'Oval')]]">
	   	<s:let name="test" value="parent::Properties[1]/parent::*[1][local-name() = ('Polygon', 'Rectangle', 'Oval')]"/>
		<s:report test="true()" id="DocumentStoriesSorted_006" role="WRN">Graphic Object: <s:value-of select="name($test)"/> can't be exported to HTML.</s:report>
	  	<s:report test="exists(parent::Properties[1]/parent::Polygon[1]/preceding-sibling::Properties[1]/AppliedFont)" id="DocumentStoriesSorted_006b" role="WRN">Text was converted to a path and will not be displayed in Epub. Font used: <s:value-of select="parent::Properties[1]/parent::Polygon[1]/preceding-sibling::Properties[1]/AppliedFont"/></s:report>
	  <s:span class="srcpath"><xsl:value-of select="(.//*/@srcpath)[1]"/></s:span>
    </s:rule>
	<s:rule context="GraphicLine">
      <s:report test="true()" id="DocumentStoriesSorted_007" role="WRN">Graphic Lines can't be exported to HTML <xsl:value-of select="(.//*/@srcpath)[1]"/></s:report>
	</s:rule>
 </s:pattern>
  

    <s:pattern id="unanchored-image">
       <s:rule context="Image">
	        <s:report test="not(parent::XmlStory)" id="DocumentStoriesSorted_007" role="WRN">
				<s:span class="srcpath"><xsl:value-of select="./parent::*[1]/parent::*[1]/parent::*[1]/@srcpath"/></s:span>
				Not anchored image: <xsl:value-of select="./Link/@LinkResourceURI"/>
			</s:report>
	   </s:rule>
 
	 </s:pattern>

<!--
 <s:pattern id="override">
	<s:rule context="@PointSize">
		<s:report test="true()" id="DocumentStoriesSorted_008a" role="MSG">
			<s:span class="srcpath"><xsl:value-of select="ancestor::ParagraphStyleRange[1]/@srcpath"/></s:span>
			Paragraph style override! (Point size)
		</s:report>
    </s:rule>
	<s:rule context="@FontStyle">
		<s:report test="true()" id="DocumentStoriesSorted_008b" role="MSG">
			<s:span class="srcpath"><xsl:value-of select="./parent::CharacterStyleRange[1]/parent::ParagraphStyleRange[1]/@srcpath"/></s:span>
			Paragraph style override! (Font style)
		</s:report>
    </s:rule>
	<s:rule context="@FillTint">
		<s:report test="true()" id="DocumentStoriesSorted_008c" role="MSG">
			<s:span class="srcpath"><xsl:value-of select="./parent::CharacterStyleRange[1]/parent::ParagraphStyleRange[1]/@srcpath"/></s:span>
			Paragraph style override! (Fill tint)
		</s:report>
    </s:rule>
	<s:rule context="@SpaceBefore">
		<s:report test="true()" id="DocumentStoriesSorted_008d" role="MSG">
			<s:span class="srcpath"><xsl:value-of select="./parent::CharacterStyleRange[1]/parent::ParagraphStyleRange[1]/@srcpath"/></s:span>
			Paragraph style override! (Space before)
		</s:report>
    </s:rule>
	<s:rule context="@SpaceAfter">
		<s:report test="true()" id="DocumentStoriesSorted_008e" role="MSG">
			<s:span class="srcpath"><xsl:value-of select="./parent::CharacterStyleRange[1]/parent::ParagraphStyleRange[1]/@srcpath"/></s:span>
			Paragraph style override! (Space after)
		</s:report>
    </s:rule>	
		<s:rule context="@FillColor">
		<s:report test="true()" id="DocumentStoriesSorted_008f" role="MSG">
			<s:span class="srcpath"><xsl:value-of select="./parent::CharacterStyleRange[1]/parent::ParagraphStyleRange[1]/@srcpath"/></s:span>
			Paragraph style override! (Fill Colour)
		</s:report>
    </s:rule>
 </s:pattern>
-->
 
</s:schema>