# Adobe InDesign CS5 7.0.3.535

datatypes xsd = "http://www.w3.org/2001/XMLSchema-datatypes"
namespace idPkg="http://ns.adobe.com/AdobeInDesign/idml/1.0/packaging"

grammar {
start = MasterSpread_File

include "../datatype.rnc"

MasterSpread_File = element idPkg:MasterSpread {
  attribute DOMVersion { "7.0" },
(
  MasterSpread_Object*
)
}

MasterSpread_Object = element MasterSpread {
  attribute Self { xsd:string },
  attribute ItemTransform { TransformationMatrixType_TypeDef }?,
  attribute OverriddenPageItemProps { list { xsd:int * } }?,
  attribute Name { xsd:string }?,
  attribute NamePrefix { xsd:string }?,
  attribute BaseName { xsd:string }?,
  attribute ShowMasterItems { xsd:boolean }?,
  attribute PageCount { xsd:int }?,
  element Properties {
    element PageColor { 
      (InDesignUIColorType_TypeDef ) |
      (enum_type, PageColorOptions_EnumValue )
    }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  Page_Object*&
  Oval_Object*&
  Rectangle_Object*&
  GraphicLine_Object*&
  TextFrame_Object*&
  Polygon_Object*&
  Group_Object*&
  EPSText_Object*&
  FormField_Object*&
  Button_Object*&
  MultiStateObject_Object*&
  TimingSetting_Object?
)
}

Page_Object = element Page {
  attribute Self { xsd:string },
  attribute GeometricBounds { list { xsd:double ,xsd:double ,xsd:double ,xsd:double } }?,
  attribute ItemTransform { TransformationMatrixType_TypeDef }?,
  attribute Name { xsd:string }?,
  attribute AppliedTrapPreset { xsd:string }?,
  attribute OverrideList { list { xsd:string * } }?,
  attribute AppliedMaster { xsd:string }?,
  attribute MasterPageTransform { TransformationMatrixType_TypeDef }?,
  attribute TabOrder { list { xsd:string * } }?,
  attribute GridStartingPoint { GridStartingPointOptions_EnumValue }?,
  attribute UseMasterGrid { xsd:boolean }?,
  element Properties {
    element Descriptor { list_type, element ListItem { 
        (string_type, xsd:string ) |
        (enum_type, PageNumberStyle_EnumValue ) |
        (bool_type, xsd:boolean ) |
        (long_type, xsd:int {minInclusive="1" maxInclusive="999999"} )
      }* 
    }?&
    element PageColor { 
      (InDesignUIColorType_TypeDef ) |
      (enum_type, PageColorOptions_EnumValue )
    }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  MarginPreference_Object?&
  Guide_Object*&
  GridDataInformation_Object?
)
}

MarginPreference_Object = element MarginPreference {
  attribute ColumnCount { xsd:int {minInclusive="1" maxInclusive="216"} }?,
  attribute ColumnGutter { xsd:double {minInclusive="0" maxInclusive="1440"} }?,
  attribute Top { xsd:double }?,
  attribute Bottom { xsd:double }?,
  attribute Left { xsd:double }?,
  attribute Right { xsd:double }?,
  attribute ColumnDirection { HorizontalOrVertical_EnumValue }?,
  attribute ColumnsPositions { list { xsd:double * } }?
}

Guide_Object = element Guide {
  attribute Self { xsd:string },
  attribute Orientation { HorizontalOrVertical_EnumValue }?,
  attribute Location { xsd:double }?,
  attribute FitToPage { xsd:boolean }?,
  attribute ViewThreshold { xsd:double {minInclusive="5" maxInclusive="4000"} }?,
  attribute Locked { xsd:boolean }?,
  attribute ItemLayer { xsd:string }?,
  attribute PageIndex { xsd:short }?,
  element Properties {
    element GuideColor { InDesignUIColorType_TypeDef }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

GridDataInformation_Object = element GridDataInformation {
  attribute FontStyle { xsd:string }?,
  attribute PointSize { xsd:double }?,
  attribute CharacterAki { xsd:double }?,
  attribute LineAki { xsd:double }?,
  attribute HorizontalScale { xsd:double }?,
  attribute VerticalScale { xsd:double }?,
  attribute LineAlignment { LineAlignment_EnumValue }?,
  attribute GridAlignment { GridAlignment_EnumValue }?,
  attribute CharacterAlignment { CharacterAlignment_EnumValue }?,
  attribute GridView { GridViewSettings_EnumValue }?,
  attribute CharacterCountLocation { CharacterCountLocation_EnumValue }?,
  attribute CharacterCountSize { xsd:double }?,
  element Properties {
    element AppliedFont { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?
  }
  ?
}

Oval_Object = element Oval {
  attribute Self { xsd:string },
  attribute ContentType { ContentType_EnumValue }?,
  attribute StoryTitle { xsd:string }?,
  attribute AllowOverrides { xsd:boolean }?,
  attribute FillColor { xsd:string }?,
  attribute FillTint { xsd:double }?,
  attribute OverprintFill { xsd:boolean }?,
  attribute CornerRadius { xsd:double }?,
  attribute StrokeWeight { xsd:double }?,
  attribute MiterLimit { xsd:double {minInclusive="1" maxInclusive="500"} }?,
  attribute EndCap { EndCap_EnumValue }?,
  attribute EndJoin { EndJoin_EnumValue }?,
  attribute StrokeType { xsd:string }?,
  attribute StrokeCornerAdjustment { StrokeCornerAdjustment_EnumValue }?,
  attribute StrokeDashAndGap { list { xsd:double * } }?,
  attribute LeftLineEnd { ArrowHead_EnumValue }?,
  attribute RightLineEnd { ArrowHead_EnumValue }?,
  attribute StrokeColor { xsd:string }?,
  attribute StrokeTint { xsd:double }?,
  attribute GradientFillStart { UnitPointType_TypeDef }?,
  attribute GradientFillLength { xsd:double }?,
  attribute GradientFillAngle { xsd:double }?,
  attribute GradientStrokeStart { UnitPointType_TypeDef }?,
  attribute GradientStrokeLength { xsd:double }?,
  attribute GradientStrokeAngle { xsd:double }?,
  attribute OverprintStroke { xsd:boolean }?,
  attribute GapColor { xsd:string }?,
  attribute GapTint { xsd:double }?,
  attribute OverprintGap { xsd:boolean }?,
  attribute StrokeAlignment { StrokeAlignment_EnumValue }?,
  attribute Nonprinting { xsd:boolean }?,
  attribute ItemLayer { xsd:string }?,
  attribute Locked { xsd:boolean }?,
  attribute LocalDisplaySetting { DisplaySettingOptions_EnumValue }?,
  attribute GradientFillHiliteLength { xsd:double }?,
  attribute GradientFillHiliteAngle { xsd:double }?,
  attribute GradientStrokeHiliteLength { xsd:double }?,
  attribute GradientStrokeHiliteAngle { xsd:double }?,
  attribute AppliedObjectStyle { xsd:string }?,
  attribute CornerOption { CornerOptions_EnumValue }?,
  attribute Visible { xsd:boolean }?,
  attribute Name { xsd:string }?,
  attribute TopLeftCornerOption { CornerOptions_EnumValue }?,
  attribute TopRightCornerOption { CornerOptions_EnumValue }?,
  attribute BottomLeftCornerOption { CornerOptions_EnumValue }?,
  attribute BottomRightCornerOption { CornerOptions_EnumValue }?,
  attribute TopLeftCornerRadius { xsd:double }?,
  attribute TopRightCornerRadius { xsd:double }?,
  attribute BottomLeftCornerRadius { xsd:double }?,
  attribute BottomRightCornerRadius { xsd:double }?,
  attribute ItemTransform { TransformationMatrixType_TypeDef }?,
  element Properties {
    element PathGeometry { element GeometryPathType { GeometryPathType_TypeDef }* 
    }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  TextPath_Object*,
  (TransparencySetting_Object?&
  StrokeTransparencySetting_Object?&
  FillTransparencySetting_Object?&
  AnchoredObjectSetting_Object?&
  TextWrapPreference_Object?&
  InCopyExportOption_Object?&
  FrameFittingOption_Object?&
  AnimationSetting_Object?&
  TimingSetting_Object?),
  (Oval_Object*&
  Rectangle_Object*&
  GraphicLine_Object*&
  TextFrame_Object*&
  Polygon_Object*&
  Sound_Object*&
  Movie_Object*&
  Link_Object*&
  Graphic_Object*&
  Image_Object*&
  EPS_Object*&
  WMF_Object*&
  PICT_Object*&
  PDF_Object*&
  Group_Object*&
  EPSText_Object*&
  FormField_Object*&
  Button_Object*&
  MultiStateObject_Object*&
  ImportedPage_Object*)
)
}

TextPath_Object = element TextPath {
  attribute Self { xsd:string },
  attribute ParentStory { xsd:string }?,
  attribute PathAlignment { PathTypeAlignments_EnumValue }?,
  attribute TextAlignment { TextTypeAlignments_EnumValue }?,
  attribute PathEffect { TextPathEffects_EnumValue }?,
  attribute FlipPathEffect { FlipValues_EnumValue }?,
  attribute PathSpacing { xsd:int }?,
  attribute StartBracket { xsd:double }?,
  attribute EndBracket { xsd:double }?,
  attribute PreviousTextFrame { xsd:string }?,
  attribute NextTextFrame { xsd:string }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

TransparencySetting_Object = element TransparencySetting {
(
  BlendingSetting_Object?&
  DropShadowSetting_Object?&
  FeatherSetting_Object?&
  InnerShadowSetting_Object?&
  OuterGlowSetting_Object?&
  InnerGlowSetting_Object?&
  BevelAndEmbossSetting_Object?&
  SatinSetting_Object?&
  DirectionalFeatherSetting_Object?&
  GradientFeatherSetting_Object?
)
}

BlendingSetting_Object = element BlendingSetting {
  attribute BlendMode { BlendMode_EnumValue }?,
  attribute Opacity { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute KnockoutGroup { xsd:boolean }?,
  attribute IsolateBlending { xsd:boolean }?
}

DropShadowSetting_Object = element DropShadowSetting {
  attribute Distance { xsd:double {minInclusive="0" maxInclusive="1000"} }?,
  attribute Angle { xsd:double {minInclusive="-180" maxInclusive="180"} }?,
  attribute Mode { ShadowMode_EnumValue }?,
  attribute BlendMode { BlendMode_EnumValue }?,
  attribute Opacity { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute XOffset { xsd:double {minInclusive="-1000" maxInclusive="1000"} }?,
  attribute YOffset { xsd:double {minInclusive="-1000" maxInclusive="1000"} }?,
  attribute Size { xsd:double {minInclusive="0" maxInclusive="144"} }?,
  attribute EffectColor { xsd:string }?,
  attribute Noise { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute Spread { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute UseGlobalLight { xsd:boolean }?,
  attribute KnockedOut { xsd:boolean }?,
  attribute HonorOtherEffects { xsd:boolean }?
}

FeatherSetting_Object = element FeatherSetting {
  attribute Mode { FeatherMode_EnumValue }?,
  attribute Width { xsd:double {minInclusive="0" maxInclusive="1000"} }?,
  attribute CornerType { FeatherCornerType_EnumValue }?,
  attribute Noise { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute ChokeAmount { xsd:double {minInclusive="0" maxInclusive="100"} }?
}

InnerShadowSetting_Object = element InnerShadowSetting {
  attribute XOffset { xsd:double {minInclusive="-1000" maxInclusive="1000"} }?,
  attribute YOffset { xsd:double {minInclusive="-1000" maxInclusive="1000"} }?,
  attribute Applied { xsd:boolean }?,
  attribute EffectColor { xsd:string }?,
  attribute BlendMode { BlendMode_EnumValue }?,
  attribute Opacity { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute Angle { xsd:double {minInclusive="-180" maxInclusive="180"} }?,
  attribute Distance { xsd:double {minInclusive="0" maxInclusive="1000"} }?,
  attribute UseGlobalLight { xsd:boolean }?,
  attribute ChokeAmount { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute Size { xsd:double {minInclusive="0" maxInclusive="144"} }?,
  attribute Noise { xsd:double {minInclusive="0" maxInclusive="100"} }?
}

OuterGlowSetting_Object = element OuterGlowSetting {
  attribute Applied { xsd:boolean }?,
  attribute BlendMode { BlendMode_EnumValue }?,
  attribute Opacity { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute Noise { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute EffectColor { xsd:string }?,
  attribute Technique { GlowTechnique_EnumValue }?,
  attribute Spread { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute Size { xsd:double {minInclusive="0" maxInclusive="144"} }?
}

InnerGlowSetting_Object = element InnerGlowSetting {
  attribute Applied { xsd:boolean }?,
  attribute BlendMode { BlendMode_EnumValue }?,
  attribute Opacity { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute Noise { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute EffectColor { xsd:string }?,
  attribute Technique { GlowTechnique_EnumValue }?,
  attribute Spread { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute Size { xsd:double {minInclusive="0" maxInclusive="144"} }?,
  attribute Source { InnerGlowSource_EnumValue }?
}

BevelAndEmbossSetting_Object = element BevelAndEmbossSetting {
  attribute Applied { xsd:boolean }?,
  attribute Style { BevelAndEmbossStyle_EnumValue }?,
  attribute Technique { BevelAndEmbossTechnique_EnumValue }?,
  attribute Depth { xsd:double {minInclusive="0" maxInclusive="1000"} }?,
  attribute Direction { BevelAndEmbossDirection_EnumValue }?,
  attribute Size { xsd:double {minInclusive="0" maxInclusive="144"} }?,
  attribute Soften { xsd:double {minInclusive="0" maxInclusive="144"} }?,
  attribute Angle { xsd:double {minInclusive="-180" maxInclusive="180"} }?,
  attribute Altitude { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute UseGlobalLight { xsd:boolean }?,
  attribute HighlightColor { xsd:string }?,
  attribute HighlightBlendMode { BlendMode_EnumValue }?,
  attribute HighlightOpacity { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute ShadowColor { xsd:string }?,
  attribute ShadowBlendMode { BlendMode_EnumValue }?,
  attribute ShadowOpacity { xsd:double {minInclusive="0" maxInclusive="100"} }?
}

SatinSetting_Object = element SatinSetting {
  attribute Applied { xsd:boolean }?,
  attribute EffectColor { xsd:string }?,
  attribute BlendMode { BlendMode_EnumValue }?,
  attribute Opacity { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute Angle { xsd:double {minInclusive="-180" maxInclusive="180"} }?,
  attribute Distance { xsd:double {minInclusive="0" maxInclusive="1000"} }?,
  attribute Size { xsd:double {minInclusive="0" maxInclusive="144"} }?,
  attribute InvertEffect { xsd:boolean }?
}

DirectionalFeatherSetting_Object = element DirectionalFeatherSetting {
  attribute Applied { xsd:boolean }?,
  attribute LeftWidth { xsd:double {minInclusive="0" maxInclusive="1000"} }?,
  attribute RightWidth { xsd:double {minInclusive="0" maxInclusive="1000"} }?,
  attribute TopWidth { xsd:double {minInclusive="0" maxInclusive="1000"} }?,
  attribute BottomWidth { xsd:double {minInclusive="0" maxInclusive="1000"} }?,
  attribute ChokeAmount { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute Angle { xsd:double {minInclusive="-180" maxInclusive="180"} }?,
  attribute FollowShapeMode { FollowShapeModeOptions_EnumValue }?,
  attribute Noise { xsd:double {minInclusive="0" maxInclusive="100"} }?
}

GradientFeatherSetting_Object = element GradientFeatherSetting {
  attribute Applied { xsd:boolean }?,
  attribute Type { GradientType_EnumValue }?,
  attribute Angle { xsd:double {minInclusive="-180" maxInclusive="180"} }?,
  attribute Length { xsd:double }?,
  attribute GradientStart { UnitPointType_TypeDef }?,
  attribute HiliteAngle { xsd:double }?,
  attribute HiliteLength { xsd:double }?,
(
  OpacityGradientStop_Object*
)
}

OpacityGradientStop_Object = element OpacityGradientStop {
  attribute Self { xsd:string },
  attribute Opacity { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute Location { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute Midpoint { xsd:double {minInclusive="13" maxInclusive="87"} }?
}

StrokeTransparencySetting_Object = element StrokeTransparencySetting {
(
  BlendingSetting_Object?&
  DropShadowSetting_Object?&
  FeatherSetting_Object?&
  InnerShadowSetting_Object?&
  OuterGlowSetting_Object?&
  InnerGlowSetting_Object?&
  BevelAndEmbossSetting_Object?&
  SatinSetting_Object?&
  DirectionalFeatherSetting_Object?&
  GradientFeatherSetting_Object?
)
}

FillTransparencySetting_Object = element FillTransparencySetting {
(
  BlendingSetting_Object?&
  DropShadowSetting_Object?&
  FeatherSetting_Object?&
  InnerShadowSetting_Object?&
  OuterGlowSetting_Object?&
  InnerGlowSetting_Object?&
  BevelAndEmbossSetting_Object?&
  SatinSetting_Object?&
  DirectionalFeatherSetting_Object?&
  GradientFeatherSetting_Object?
)
}

AnchoredObjectSetting_Object = element AnchoredObjectSetting {
  attribute AnchoredPosition { AnchorPosition_EnumValue }?,
  attribute SpineRelative { xsd:boolean }?,
  attribute LockPosition { xsd:boolean }?,
  attribute PinPosition { xsd:boolean }?,
  attribute AnchorPoint { AnchorPoint_EnumValue }?,
  attribute HorizontalAlignment { HorizontalAlignment_EnumValue }?,
  attribute HorizontalReferencePoint { AnchoredRelativeTo_EnumValue }?,
  attribute VerticalAlignment { VerticalAlignment_EnumValue }?,
  attribute VerticalReferencePoint { VerticallyRelativeTo_EnumValue }?,
  attribute AnchorXoffset { xsd:double }?,
  attribute AnchorYoffset { xsd:double }?,
  attribute AnchorSpaceAbove { xsd:double }?
}

TextWrapPreference_Object = element TextWrapPreference {
  attribute Inverse { xsd:boolean }?,
  attribute ApplyToMasterPageOnly { xsd:boolean }?,
  attribute TextWrapSide { TextWrapSideOptions_EnumValue }?,
  attribute TextWrapMode { TextWrapModes_EnumValue }?,
  element Properties {
    element TextWrapOffset { UnitRectangleBoundsType_TypeDef }?&
    element PathGeometry { element GeometryPathType { GeometryPathType_TypeDef }* 
    }?
  }
  ?
  ,
(
  ContourOption_Object?
)
}

ContourOption_Object = element ContourOption {
  attribute ContourType { ContourOptionsTypes_EnumValue }?,
  attribute IncludeInsideEdges { xsd:boolean }?,
  attribute ContourPathName { xsd:string }?
}

InCopyExportOption_Object = element InCopyExportOption {
  attribute IncludeGraphicProxies { xsd:boolean }?,
  attribute IncludeAllResources { xsd:boolean }?
}

FrameFittingOption_Object = element FrameFittingOption {
  attribute AutoFit { xsd:boolean }?,
  attribute LeftCrop { xsd:double }?,
  attribute TopCrop { xsd:double }?,
  attribute RightCrop { xsd:double }?,
  attribute BottomCrop { xsd:double }?,
  attribute FittingOnEmptyFrame { EmptyFrameFittingOptions_EnumValue }?,
  attribute FittingAlignment { AnchorPoint_EnumValue }?
}

AnimationSetting_Object = element AnimationSetting {
  attribute TransformOffsets { list { xsd:double ,xsd:double } }?,
  attribute Duration { xsd:double {minInclusive="0.125" maxInclusive="60"} }?,
  attribute DesignOption { DesignOptions_EnumValue }?,
  attribute EaseType { AnimationEaseOptions_EnumValue }?,
  attribute Plays { xsd:int {minInclusive="1" maxInclusive="100"} }?,
  attribute PlaysLoop { xsd:boolean }?,
  attribute InitiallyHidden { xsd:boolean }?,
  attribute HiddenAfter { xsd:boolean }?,
  attribute HasCustomSettings { xsd:boolean }?,
  element Properties {
    element Preset { 
      (object_type, xsd:string ) |
      (string_type, xsd:string ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element MotionPathPoints { GeometryPathType_TypeDef }?&
    element MotionPath { element AnimationDataPathKeyFrameType { AnimationDataPathKeyFrameType_TypeDef }* 
    }?&
    element OpacityArray { element AnimationDataKeyFrameType { AnimationDataKeyFrameType_TypeDef }* 
    }?&
    element RotationArray { element AnimationDataKeyFrameType { AnimationDataKeyFrameType_TypeDef }* 
    }?&
    element ScaleXArray { element AnimationDataKeyFrameType { AnimationDataKeyFrameType_TypeDef }* 
    }?&
    element ScaleYArray { element AnimationDataKeyFrameType { AnimationDataKeyFrameType_TypeDef }* 
    }?
  }
  ?
}

Sound_Object = element Sound {
  attribute Self { xsd:string },
  attribute Name { xsd:string }?,
  attribute Description { xsd:string }?,
  attribute PlayOnPageTurn { xsd:boolean }?,
  attribute DoNotPrintPoster { xsd:boolean }?,
  attribute EmbedInPDF { xsd:boolean }?,
  attribute ItemLayer { xsd:string }?,
  attribute FilePath { xsd:string }?,
  attribute StopOnPageTurn { xsd:boolean }?,
  attribute SoundLoop { xsd:boolean }?,
  attribute ItemTransform { TransformationMatrixType_TypeDef }?,
  attribute FillColor { xsd:string }?,
  attribute FillTint { xsd:double }?,
  attribute OverprintFill { xsd:boolean }?,
  attribute CornerRadius { xsd:double }?,
  attribute StrokeWeight { xsd:double }?,
  attribute MiterLimit { xsd:double {minInclusive="1" maxInclusive="500"} }?,
  attribute EndCap { EndCap_EnumValue }?,
  attribute EndJoin { EndJoin_EnumValue }?,
  attribute StrokeType { xsd:string }?,
  attribute StrokeCornerAdjustment { StrokeCornerAdjustment_EnumValue }?,
  attribute StrokeDashAndGap { list { xsd:double * } }?,
  attribute LeftLineEnd { ArrowHead_EnumValue }?,
  attribute RightLineEnd { ArrowHead_EnumValue }?,
  attribute StrokeColor { xsd:string }?,
  attribute StrokeTint { xsd:double }?,
  attribute GradientFillStart { UnitPointType_TypeDef }?,
  attribute GradientFillLength { xsd:double }?,
  attribute GradientFillAngle { xsd:double }?,
  attribute GradientStrokeStart { UnitPointType_TypeDef }?,
  attribute GradientStrokeLength { xsd:double }?,
  attribute GradientStrokeAngle { xsd:double }?,
  attribute OverprintStroke { xsd:boolean }?,
  attribute GapColor { xsd:string }?,
  attribute GapTint { xsd:double }?,
  attribute OverprintGap { xsd:boolean }?,
  attribute StrokeAlignment { StrokeAlignment_EnumValue }?,
  attribute Nonprinting { xsd:boolean }?,
  attribute Locked { xsd:boolean }?,
  attribute LocalDisplaySetting { DisplaySettingOptions_EnumValue }?,
  attribute GradientFillHiliteLength { xsd:double }?,
  attribute GradientFillHiliteAngle { xsd:double }?,
  attribute GradientStrokeHiliteLength { xsd:double }?,
  attribute GradientStrokeHiliteAngle { xsd:double }?,
  attribute AppliedObjectStyle { xsd:string }?,
  attribute CornerOption { CornerOptions_EnumValue }?,
  attribute Visible { xsd:boolean }?,
  attribute TopLeftCornerOption { CornerOptions_EnumValue }?,
  attribute TopRightCornerOption { CornerOptions_EnumValue }?,
  attribute BottomLeftCornerOption { CornerOptions_EnumValue }?,
  attribute BottomRightCornerOption { CornerOptions_EnumValue }?,
  attribute TopLeftCornerRadius { xsd:double }?,
  attribute TopRightCornerRadius { xsd:double }?,
  attribute BottomLeftCornerRadius { xsd:double }?,
  attribute BottomRightCornerRadius { xsd:double }?,
  element Properties {
    element Contents { text }?&
    element PathGeometry { element GeometryPathType { GeometryPathType_TypeDef }* 
    }?&
    element GraphicBounds { RectangleBoundsType_TypeDef }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  TransparencySetting_Object?&
  TextWrapPreference_Object?&
  Image_Object*&
  Graphic_Object*&
  Link_Object*&
  AnimationSetting_Object?&
  TimingSetting_Object?
)
}

Movie_Object = element Movie {
  attribute Self { xsd:string },
  attribute Name { xsd:string }?,
  attribute Description { xsd:string }?,
  attribute FloatingWindowPosition { FloatingWindowPosition_EnumValue }?,
  attribute FloatingWindowSize { FloatingWindowSize_EnumValue }?,
  attribute PlayOnPageTurn { xsd:boolean }?,
  attribute ShowControls { xsd:boolean }?,
  attribute FloatingWindow { xsd:boolean }?,
  attribute URL { xsd:string }?,
  attribute EmbedInPDF { xsd:boolean }?,
  attribute PlayMode { PlayMode_EnumValue }?,
  attribute CustomPoster { xsd:boolean }?,
  attribute IntrinsicBounds { list { xsd:int ,xsd:int } }?,
  attribute CanChoosePosters { xsd:boolean }?,
  attribute PosterAvailable { xsd:boolean }?,
  attribute ItemLayer { xsd:string }?,
  attribute FilePath { xsd:string }?,
  attribute ControllerSkin { xsd:string }?,
  attribute ShowController { xsd:boolean }?,
  attribute MovieLoop { xsd:boolean }?,
  attribute ItemTransform { TransformationMatrixType_TypeDef }?,
  attribute FillColor { xsd:string }?,
  attribute FillTint { xsd:double }?,
  attribute OverprintFill { xsd:boolean }?,
  attribute CornerRadius { xsd:double }?,
  attribute StrokeWeight { xsd:double }?,
  attribute MiterLimit { xsd:double {minInclusive="1" maxInclusive="500"} }?,
  attribute EndCap { EndCap_EnumValue }?,
  attribute EndJoin { EndJoin_EnumValue }?,
  attribute StrokeType { xsd:string }?,
  attribute StrokeCornerAdjustment { StrokeCornerAdjustment_EnumValue }?,
  attribute StrokeDashAndGap { list { xsd:double * } }?,
  attribute LeftLineEnd { ArrowHead_EnumValue }?,
  attribute RightLineEnd { ArrowHead_EnumValue }?,
  attribute StrokeColor { xsd:string }?,
  attribute StrokeTint { xsd:double }?,
  attribute GradientFillStart { UnitPointType_TypeDef }?,
  attribute GradientFillLength { xsd:double }?,
  attribute GradientFillAngle { xsd:double }?,
  attribute GradientStrokeStart { UnitPointType_TypeDef }?,
  attribute GradientStrokeLength { xsd:double }?,
  attribute GradientStrokeAngle { xsd:double }?,
  attribute OverprintStroke { xsd:boolean }?,
  attribute GapColor { xsd:string }?,
  attribute GapTint { xsd:double }?,
  attribute OverprintGap { xsd:boolean }?,
  attribute StrokeAlignment { StrokeAlignment_EnumValue }?,
  attribute Nonprinting { xsd:boolean }?,
  attribute Locked { xsd:boolean }?,
  attribute LocalDisplaySetting { DisplaySettingOptions_EnumValue }?,
  attribute GradientFillHiliteLength { xsd:double }?,
  attribute GradientFillHiliteAngle { xsd:double }?,
  attribute GradientStrokeHiliteLength { xsd:double }?,
  attribute GradientStrokeHiliteAngle { xsd:double }?,
  attribute AppliedObjectStyle { xsd:string }?,
  attribute CornerOption { CornerOptions_EnumValue }?,
  attribute Visible { xsd:boolean }?,
  attribute TopLeftCornerOption { CornerOptions_EnumValue }?,
  attribute TopRightCornerOption { CornerOptions_EnumValue }?,
  attribute BottomLeftCornerOption { CornerOptions_EnumValue }?,
  attribute BottomRightCornerOption { CornerOptions_EnumValue }?,
  attribute TopLeftCornerRadius { xsd:double }?,
  attribute TopRightCornerRadius { xsd:double }?,
  attribute BottomLeftCornerRadius { xsd:double }?,
  attribute BottomRightCornerRadius { xsd:double }?,
  element Properties {
    element Contents { text }?&
    element PathGeometry { element GeometryPathType { GeometryPathType_TypeDef }* 
    }?&
    element GraphicBounds { RectangleBoundsType_TypeDef }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  TransparencySetting_Object?&
  TextWrapPreference_Object?&
  Image_Object*&
  Graphic_Object*&
  NavigationPoint_Object*&
  Link_Object*&
  AnimationSetting_Object?&
  TimingSetting_Object?
)
}

NavigationPoint_Object = element NavigationPoint {
  attribute Self { xsd:string },
  attribute Id { xsd:int }?,
  attribute Name { xsd:string }?,
  attribute Time { xsd:double }?
}

Link_Object = element Link {
  attribute Self { xsd:string },
  attribute AssetURL { xsd:string }?,
  attribute AssetID { xsd:string }?,
  attribute LinkResourceURI { xsd:string },
  attribute LinkResourceFormat { xsd:string }?,
  attribute StoredState { LinkResourceStoreState_EnumValue }?,
  attribute LinkClassID { xsd:int }?,
  attribute LinkClientID { xsd:int }?,
  attribute LinkResourceModified { xsd:boolean }?,
  attribute LinkObjectModified { xsd:boolean }?,
  attribute ShowInUI { xsd:boolean }?,
  attribute CanEmbed { xsd:boolean }?,
  attribute CanUnembed { xsd:boolean }?,
  attribute CanPackage { xsd:boolean }?,
  attribute ImportPolicy { LinkImportPolicy_EnumValue }?,
  attribute ExportPolicy { LinkExportPolicy_EnumValue }?,
  attribute LinkImportStamp { xsd:string }?,
  attribute LinkImportModificationTime { xsd:dateTime }?,
  attribute LinkImportTime { xsd:dateTime }?,
  attribute LinkExportTime { xsd:dateTime }?,
  attribute LinkResourceSize { text }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

Graphic_Object = element Graphic {
  attribute Self { xsd:string },
  attribute LocalDisplaySetting { DisplaySettingOptions_EnumValue }?,
  attribute ImageTypeName { xsd:string }?,
  attribute AppliedObjectStyle { xsd:string }?,
  attribute ItemTransform { TransformationMatrixType_TypeDef }?,
  attribute FillColor { xsd:string }?,
  attribute FillTint { xsd:double }?,
  attribute OverprintFill { xsd:boolean }?,
  attribute CornerRadius { xsd:double }?,
  attribute StrokeWeight { xsd:double }?,
  attribute MiterLimit { xsd:double {minInclusive="1" maxInclusive="500"} }?,
  attribute EndCap { EndCap_EnumValue }?,
  attribute EndJoin { EndJoin_EnumValue }?,
  attribute StrokeType { xsd:string }?,
  attribute StrokeCornerAdjustment { StrokeCornerAdjustment_EnumValue }?,
  attribute StrokeDashAndGap { list { xsd:double * } }?,
  attribute LeftLineEnd { ArrowHead_EnumValue }?,
  attribute RightLineEnd { ArrowHead_EnumValue }?,
  attribute StrokeColor { xsd:string }?,
  attribute StrokeTint { xsd:double }?,
  attribute GradientFillStart { UnitPointType_TypeDef }?,
  attribute GradientFillLength { xsd:double }?,
  attribute GradientFillAngle { xsd:double }?,
  attribute GradientStrokeStart { UnitPointType_TypeDef }?,
  attribute GradientStrokeLength { xsd:double }?,
  attribute GradientStrokeAngle { xsd:double }?,
  attribute OverprintStroke { xsd:boolean }?,
  attribute GapColor { xsd:string }?,
  attribute GapTint { xsd:double }?,
  attribute OverprintGap { xsd:boolean }?,
  attribute StrokeAlignment { StrokeAlignment_EnumValue }?,
  attribute Nonprinting { xsd:boolean }?,
  attribute ItemLayer { xsd:string }?,
  attribute Locked { xsd:boolean }?,
  attribute GradientFillHiliteLength { xsd:double }?,
  attribute GradientFillHiliteAngle { xsd:double }?,
  attribute GradientStrokeHiliteLength { xsd:double }?,
  attribute GradientStrokeHiliteAngle { xsd:double }?,
  attribute CornerOption { CornerOptions_EnumValue }?,
  attribute Visible { xsd:boolean }?,
  attribute Name { xsd:string }?,
  attribute TopLeftCornerOption { CornerOptions_EnumValue }?,
  attribute TopRightCornerOption { CornerOptions_EnumValue }?,
  attribute BottomLeftCornerOption { CornerOptions_EnumValue }?,
  attribute BottomRightCornerOption { CornerOptions_EnumValue }?,
  attribute TopLeftCornerRadius { xsd:double }?,
  attribute TopRightCornerRadius { xsd:double }?,
  attribute BottomLeftCornerRadius { xsd:double }?,
  attribute BottomRightCornerRadius { xsd:double }?,
  element Properties {
    element Contents { text }?&
    element GraphicProxy { text }?&
    element ClippingPathGeometry { element GeometryPathType { GeometryPathType_TypeDef }* 
    }?&
    element GraphicBounds { RectangleBoundsType_TypeDef }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  TransparencySetting_Object?&
  TextWrapPreference_Object?&
  MetadataPacketPreference_Object?&
  AnimationSetting_Object?&
  TimingSetting_Object?
)
}

MetadataPacketPreference_Object = element MetadataPacketPreference {
  element Properties {
    element Contents { xsd:string }?
  }
  ?
}

Image_Object = element Image {
  attribute Self { xsd:string },
  attribute FillColor { xsd:string }?,
  attribute FillTint { xsd:double }?,
  attribute OverprintFill { xsd:boolean }?,
  attribute Nonprinting { xsd:boolean }?,
  attribute Space { xsd:string }?,
  attribute ActualPpi { list { xsd:double ,xsd:double } }?,
  attribute EffectivePpi { list { xsd:double ,xsd:double } }?,
  attribute ImageRenderingIntent { RenderingIntent_EnumValue }?,
  attribute LocalDisplaySetting { DisplaySettingOptions_EnumValue }?,
  attribute ImageTypeName { xsd:string }?,
  attribute AppliedObjectStyle { xsd:string }?,
  attribute ItemTransform { TransformationMatrixType_TypeDef }?,
  attribute CornerRadius { xsd:double }?,
  attribute StrokeWeight { xsd:double }?,
  attribute MiterLimit { xsd:double {minInclusive="1" maxInclusive="500"} }?,
  attribute EndCap { EndCap_EnumValue }?,
  attribute EndJoin { EndJoin_EnumValue }?,
  attribute StrokeType { xsd:string }?,
  attribute StrokeCornerAdjustment { StrokeCornerAdjustment_EnumValue }?,
  attribute StrokeDashAndGap { list { xsd:double * } }?,
  attribute LeftLineEnd { ArrowHead_EnumValue }?,
  attribute RightLineEnd { ArrowHead_EnumValue }?,
  attribute StrokeColor { xsd:string }?,
  attribute StrokeTint { xsd:double }?,
  attribute GradientFillStart { UnitPointType_TypeDef }?,
  attribute GradientFillLength { xsd:double }?,
  attribute GradientFillAngle { xsd:double }?,
  attribute GradientStrokeStart { UnitPointType_TypeDef }?,
  attribute GradientStrokeLength { xsd:double }?,
  attribute GradientStrokeAngle { xsd:double }?,
  attribute OverprintStroke { xsd:boolean }?,
  attribute GapColor { xsd:string }?,
  attribute GapTint { xsd:double }?,
  attribute OverprintGap { xsd:boolean }?,
  attribute StrokeAlignment { StrokeAlignment_EnumValue }?,
  attribute ItemLayer { xsd:string }?,
  attribute Locked { xsd:boolean }?,
  attribute GradientFillHiliteLength { xsd:double }?,
  attribute GradientFillHiliteAngle { xsd:double }?,
  attribute GradientStrokeHiliteLength { xsd:double }?,
  attribute GradientStrokeHiliteAngle { xsd:double }?,
  attribute CornerOption { CornerOptions_EnumValue }?,
  attribute Visible { xsd:boolean }?,
  attribute Name { xsd:string }?,
  attribute TopLeftCornerOption { CornerOptions_EnumValue }?,
  attribute TopRightCornerOption { CornerOptions_EnumValue }?,
  attribute BottomLeftCornerOption { CornerOptions_EnumValue }?,
  attribute BottomRightCornerOption { CornerOptions_EnumValue }?,
  attribute TopLeftCornerRadius { xsd:double }?,
  attribute TopRightCornerRadius { xsd:double }?,
  attribute BottomLeftCornerRadius { xsd:double }?,
  attribute BottomRightCornerRadius { xsd:double }?,
  element Properties {
    element Profile { 
      (enum_type, Profile_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element Contents { text }?&
    element GraphicProxy { text }?&
    element ClippingPathGeometry { element GeometryPathType { GeometryPathType_TypeDef }* 
    }?&
    element GraphicBounds { RectangleBoundsType_TypeDef }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  TransparencySetting_Object?&
  TextWrapPreference_Object?&
  MetadataPacketPreference_Object?&
  Link_Object*&
  ClippingPathSettings_Object?&
  ImageIOPreference_Object?&
  GraphicLayerOption_Object?&
  LayerCompOption_Object?&
  AnimationSetting_Object?&
  TimingSetting_Object?
)
}

ClippingPathSettings_Object = element ClippingPathSettings {
  attribute ClippingType { ClippingPathType_EnumValue }?,
  attribute InvertPath { xsd:boolean }?,
  attribute IncludeInsideEdges { xsd:boolean }?,
  attribute RestrictToFrame { xsd:boolean }?,
  attribute UseHighResolutionImage { xsd:boolean }?,
  attribute Threshold { xsd:int {minInclusive="0" maxInclusive="255"} }?,
  attribute Tolerance { xsd:double {minInclusive="0" maxInclusive="10"} }?,
  attribute InsetFrame { xsd:double }?,
  attribute AppliedPathName { xsd:string }?,
  attribute Index { xsd:int }?
}

ImageIOPreference_Object = element ImageIOPreference {
  attribute ApplyPhotoshopClippingPath { xsd:boolean }?,
  attribute AllowAutoEmbedding { xsd:boolean }?,
  attribute AlphaChannelName { xsd:string }?
}

GraphicLayerOption_Object = element GraphicLayerOption {
  attribute UpdateLinkOption { UpdateLinkOptions_EnumValue }?,
(
  GraphicLayer_Object*
)
}

GraphicLayer_Object = element GraphicLayer {
  attribute Self { xsd:string },
  attribute Name { xsd:string }?,
  attribute OriginalVisibility { xsd:boolean }?,
  attribute CurrentVisibility { xsd:boolean }?,
  attribute SeparatorLayer { xsd:boolean }?,
  attribute AdjustmentLayer { xsd:boolean }?,
  attribute FXLayer { xsd:boolean }?,
  attribute Locked { xsd:boolean }?,
  attribute HasViewState { xsd:boolean }?,
  attribute ViewState { xsd:boolean }?,
  attribute HasExportState { xsd:boolean }?,
  attribute ExportState { xsd:boolean }?,
  attribute HasPrintState { xsd:boolean }?,
  attribute PrintState { xsd:boolean }?,
  attribute Id { xsd:int }?,
(
  GraphicLayer_Object*
)
}

LayerCompOption_Object = element LayerCompOption {
  attribute AppliedLayerComp { xsd:int }?
}

EPS_Object = element EPS {
  attribute Self { xsd:string },
  attribute Nonprinting { xsd:boolean }?,
  attribute Space { xsd:string }?,
  attribute ActualPpi { list { xsd:double ,xsd:double } }?,
  attribute EffectivePpi { list { xsd:double ,xsd:double } }?,
  attribute GrayVectorPolicy { PlacedVectorProfilePolicy_EnumValue }?,
  attribute RGBVectorPolicy { PlacedVectorProfilePolicy_EnumValue }?,
  attribute CMYKVectorPolicy { PlacedVectorProfilePolicy_EnumValue }?,
  attribute LocalDisplaySetting { DisplaySettingOptions_EnumValue }?,
  attribute ImageTypeName { xsd:string }?,
  attribute AppliedObjectStyle { xsd:string }?,
  attribute ItemTransform { TransformationMatrixType_TypeDef }?,
  attribute FillColor { xsd:string }?,
  attribute FillTint { xsd:double }?,
  attribute OverprintFill { xsd:boolean }?,
  attribute CornerRadius { xsd:double }?,
  attribute StrokeWeight { xsd:double }?,
  attribute MiterLimit { xsd:double {minInclusive="1" maxInclusive="500"} }?,
  attribute EndCap { EndCap_EnumValue }?,
  attribute EndJoin { EndJoin_EnumValue }?,
  attribute StrokeType { xsd:string }?,
  attribute StrokeCornerAdjustment { StrokeCornerAdjustment_EnumValue }?,
  attribute StrokeDashAndGap { list { xsd:double * } }?,
  attribute LeftLineEnd { ArrowHead_EnumValue }?,
  attribute RightLineEnd { ArrowHead_EnumValue }?,
  attribute StrokeColor { xsd:string }?,
  attribute StrokeTint { xsd:double }?,
  attribute GradientFillStart { UnitPointType_TypeDef }?,
  attribute GradientFillLength { xsd:double }?,
  attribute GradientFillAngle { xsd:double }?,
  attribute GradientStrokeStart { UnitPointType_TypeDef }?,
  attribute GradientStrokeLength { xsd:double }?,
  attribute GradientStrokeAngle { xsd:double }?,
  attribute OverprintStroke { xsd:boolean }?,
  attribute GapColor { xsd:string }?,
  attribute GapTint { xsd:double }?,
  attribute OverprintGap { xsd:boolean }?,
  attribute StrokeAlignment { StrokeAlignment_EnumValue }?,
  attribute ItemLayer { xsd:string }?,
  attribute Locked { xsd:boolean }?,
  attribute GradientFillHiliteLength { xsd:double }?,
  attribute GradientFillHiliteAngle { xsd:double }?,
  attribute GradientStrokeHiliteLength { xsd:double }?,
  attribute GradientStrokeHiliteAngle { xsd:double }?,
  attribute CornerOption { CornerOptions_EnumValue }?,
  attribute Visible { xsd:boolean }?,
  attribute Name { xsd:string }?,
  attribute TopLeftCornerOption { CornerOptions_EnumValue }?,
  attribute TopRightCornerOption { CornerOptions_EnumValue }?,
  attribute BottomLeftCornerOption { CornerOptions_EnumValue }?,
  attribute BottomRightCornerOption { CornerOptions_EnumValue }?,
  attribute TopLeftCornerRadius { xsd:double }?,
  attribute TopRightCornerRadius { xsd:double }?,
  attribute BottomLeftCornerRadius { xsd:double }?,
  attribute BottomRightCornerRadius { xsd:double }?,
  element Properties {
    element Contents { text }?&
    element GraphicProxy { text }?&
    element ClippingPathGeometry { element GeometryPathType { GeometryPathType_TypeDef }* 
    }?&
    element GraphicBounds { RectangleBoundsType_TypeDef }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  TransparencySetting_Object?&
  TextWrapPreference_Object?&
  MetadataPacketPreference_Object?&
  Link_Object*&
  ClippingPathSettings_Object?&
  AnimationSetting_Object?&
  TimingSetting_Object?
)
}

WMF_Object = element WMF {
  attribute Self { xsd:string },
  attribute Nonprinting { xsd:boolean }?,
  attribute LocalDisplaySetting { DisplaySettingOptions_EnumValue }?,
  attribute ImageTypeName { xsd:string }?,
  attribute AppliedObjectStyle { xsd:string }?,
  attribute ItemTransform { TransformationMatrixType_TypeDef }?,
  attribute FillColor { xsd:string }?,
  attribute FillTint { xsd:double }?,
  attribute OverprintFill { xsd:boolean }?,
  attribute CornerRadius { xsd:double }?,
  attribute StrokeWeight { xsd:double }?,
  attribute MiterLimit { xsd:double {minInclusive="1" maxInclusive="500"} }?,
  attribute EndCap { EndCap_EnumValue }?,
  attribute EndJoin { EndJoin_EnumValue }?,
  attribute StrokeType { xsd:string }?,
  attribute StrokeCornerAdjustment { StrokeCornerAdjustment_EnumValue }?,
  attribute StrokeDashAndGap { list { xsd:double * } }?,
  attribute LeftLineEnd { ArrowHead_EnumValue }?,
  attribute RightLineEnd { ArrowHead_EnumValue }?,
  attribute StrokeColor { xsd:string }?,
  attribute StrokeTint { xsd:double }?,
  attribute GradientFillStart { UnitPointType_TypeDef }?,
  attribute GradientFillLength { xsd:double }?,
  attribute GradientFillAngle { xsd:double }?,
  attribute GradientStrokeStart { UnitPointType_TypeDef }?,
  attribute GradientStrokeLength { xsd:double }?,
  attribute GradientStrokeAngle { xsd:double }?,
  attribute OverprintStroke { xsd:boolean }?,
  attribute GapColor { xsd:string }?,
  attribute GapTint { xsd:double }?,
  attribute OverprintGap { xsd:boolean }?,
  attribute StrokeAlignment { StrokeAlignment_EnumValue }?,
  attribute ItemLayer { xsd:string }?,
  attribute Locked { xsd:boolean }?,
  attribute GradientFillHiliteLength { xsd:double }?,
  attribute GradientFillHiliteAngle { xsd:double }?,
  attribute GradientStrokeHiliteLength { xsd:double }?,
  attribute GradientStrokeHiliteAngle { xsd:double }?,
  attribute CornerOption { CornerOptions_EnumValue }?,
  attribute Visible { xsd:boolean }?,
  attribute Name { xsd:string }?,
  attribute TopLeftCornerOption { CornerOptions_EnumValue }?,
  attribute TopRightCornerOption { CornerOptions_EnumValue }?,
  attribute BottomLeftCornerOption { CornerOptions_EnumValue }?,
  attribute BottomRightCornerOption { CornerOptions_EnumValue }?,
  attribute TopLeftCornerRadius { xsd:double }?,
  attribute TopRightCornerRadius { xsd:double }?,
  attribute BottomLeftCornerRadius { xsd:double }?,
  attribute BottomRightCornerRadius { xsd:double }?,
  element Properties {
    element Contents { text }?&
    element GraphicProxy { text }?&
    element ClippingPathGeometry { element GeometryPathType { GeometryPathType_TypeDef }* 
    }?&
    element GraphicBounds { RectangleBoundsType_TypeDef }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  TransparencySetting_Object?&
  TextWrapPreference_Object?&
  MetadataPacketPreference_Object?&
  Link_Object*&
  ClippingPathSettings_Object?&
  AnimationSetting_Object?&
  TimingSetting_Object?
)
}

PICT_Object = element PICT {
  attribute Self { xsd:string },
  attribute Nonprinting { xsd:boolean }?,
  attribute LocalDisplaySetting { DisplaySettingOptions_EnumValue }?,
  attribute ImageTypeName { xsd:string }?,
  attribute AppliedObjectStyle { xsd:string }?,
  attribute ItemTransform { TransformationMatrixType_TypeDef }?,
  attribute FillColor { xsd:string }?,
  attribute FillTint { xsd:double }?,
  attribute OverprintFill { xsd:boolean }?,
  attribute CornerRadius { xsd:double }?,
  attribute StrokeWeight { xsd:double }?,
  attribute MiterLimit { xsd:double {minInclusive="1" maxInclusive="500"} }?,
  attribute EndCap { EndCap_EnumValue }?,
  attribute EndJoin { EndJoin_EnumValue }?,
  attribute StrokeType { xsd:string }?,
  attribute StrokeCornerAdjustment { StrokeCornerAdjustment_EnumValue }?,
  attribute StrokeDashAndGap { list { xsd:double * } }?,
  attribute LeftLineEnd { ArrowHead_EnumValue }?,
  attribute RightLineEnd { ArrowHead_EnumValue }?,
  attribute StrokeColor { xsd:string }?,
  attribute StrokeTint { xsd:double }?,
  attribute GradientFillStart { UnitPointType_TypeDef }?,
  attribute GradientFillLength { xsd:double }?,
  attribute GradientFillAngle { xsd:double }?,
  attribute GradientStrokeStart { UnitPointType_TypeDef }?,
  attribute GradientStrokeLength { xsd:double }?,
  attribute GradientStrokeAngle { xsd:double }?,
  attribute OverprintStroke { xsd:boolean }?,
  attribute GapColor { xsd:string }?,
  attribute GapTint { xsd:double }?,
  attribute OverprintGap { xsd:boolean }?,
  attribute StrokeAlignment { StrokeAlignment_EnumValue }?,
  attribute ItemLayer { xsd:string }?,
  attribute Locked { xsd:boolean }?,
  attribute GradientFillHiliteLength { xsd:double }?,
  attribute GradientFillHiliteAngle { xsd:double }?,
  attribute GradientStrokeHiliteLength { xsd:double }?,
  attribute GradientStrokeHiliteAngle { xsd:double }?,
  attribute CornerOption { CornerOptions_EnumValue }?,
  attribute Visible { xsd:boolean }?,
  attribute Name { xsd:string }?,
  attribute TopLeftCornerOption { CornerOptions_EnumValue }?,
  attribute TopRightCornerOption { CornerOptions_EnumValue }?,
  attribute BottomLeftCornerOption { CornerOptions_EnumValue }?,
  attribute BottomRightCornerOption { CornerOptions_EnumValue }?,
  attribute TopLeftCornerRadius { xsd:double }?,
  attribute TopRightCornerRadius { xsd:double }?,
  attribute BottomLeftCornerRadius { xsd:double }?,
  attribute BottomRightCornerRadius { xsd:double }?,
  element Properties {
    element Contents { text }?&
    element GraphicProxy { text }?&
    element ClippingPathGeometry { element GeometryPathType { GeometryPathType_TypeDef }* 
    }?&
    element GraphicBounds { RectangleBoundsType_TypeDef }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  TransparencySetting_Object?&
  TextWrapPreference_Object?&
  MetadataPacketPreference_Object?&
  Link_Object*&
  ClippingPathSettings_Object?&
  AnimationSetting_Object?&
  TimingSetting_Object?
)
}

PDF_Object = element PDF {
  attribute Self { xsd:string },
  attribute Nonprinting { xsd:boolean }?,
  attribute GrayVectorPolicy { PlacedVectorProfilePolicy_EnumValue }?,
  attribute RGBVectorPolicy { PlacedVectorProfilePolicy_EnumValue }?,
  attribute CMYKVectorPolicy { PlacedVectorProfilePolicy_EnumValue }?,
  attribute LocalDisplaySetting { DisplaySettingOptions_EnumValue }?,
  attribute ImageTypeName { xsd:string }?,
  attribute AppliedObjectStyle { xsd:string }?,
  attribute ItemTransform { TransformationMatrixType_TypeDef }?,
  attribute FillColor { xsd:string }?,
  attribute FillTint { xsd:double }?,
  attribute OverprintFill { xsd:boolean }?,
  attribute CornerRadius { xsd:double }?,
  attribute StrokeWeight { xsd:double }?,
  attribute MiterLimit { xsd:double {minInclusive="1" maxInclusive="500"} }?,
  attribute EndCap { EndCap_EnumValue }?,
  attribute EndJoin { EndJoin_EnumValue }?,
  attribute StrokeType { xsd:string }?,
  attribute StrokeCornerAdjustment { StrokeCornerAdjustment_EnumValue }?,
  attribute StrokeDashAndGap { list { xsd:double * } }?,
  attribute LeftLineEnd { ArrowHead_EnumValue }?,
  attribute RightLineEnd { ArrowHead_EnumValue }?,
  attribute StrokeColor { xsd:string }?,
  attribute StrokeTint { xsd:double }?,
  attribute GradientFillStart { UnitPointType_TypeDef }?,
  attribute GradientFillLength { xsd:double }?,
  attribute GradientFillAngle { xsd:double }?,
  attribute GradientStrokeStart { UnitPointType_TypeDef }?,
  attribute GradientStrokeLength { xsd:double }?,
  attribute GradientStrokeAngle { xsd:double }?,
  attribute OverprintStroke { xsd:boolean }?,
  attribute GapColor { xsd:string }?,
  attribute GapTint { xsd:double }?,
  attribute OverprintGap { xsd:boolean }?,
  attribute StrokeAlignment { StrokeAlignment_EnumValue }?,
  attribute ItemLayer { xsd:string }?,
  attribute Locked { xsd:boolean }?,
  attribute GradientFillHiliteLength { xsd:double }?,
  attribute GradientFillHiliteAngle { xsd:double }?,
  attribute GradientStrokeHiliteLength { xsd:double }?,
  attribute GradientStrokeHiliteAngle { xsd:double }?,
  attribute CornerOption { CornerOptions_EnumValue }?,
  attribute Visible { xsd:boolean }?,
  attribute Name { xsd:string }?,
  attribute TopLeftCornerOption { CornerOptions_EnumValue }?,
  attribute TopRightCornerOption { CornerOptions_EnumValue }?,
  attribute BottomLeftCornerOption { CornerOptions_EnumValue }?,
  attribute BottomRightCornerOption { CornerOptions_EnumValue }?,
  attribute TopLeftCornerRadius { xsd:double }?,
  attribute TopRightCornerRadius { xsd:double }?,
  attribute BottomLeftCornerRadius { xsd:double }?,
  attribute BottomRightCornerRadius { xsd:double }?,
  element Properties {
    element Contents { text }?&
    element GraphicProxy { text }?&
    element ClippingPathGeometry { element GeometryPathType { GeometryPathType_TypeDef }* 
    }?&
    element GraphicBounds { RectangleBoundsType_TypeDef }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  TransparencySetting_Object?&
  TextWrapPreference_Object?&
  PDFAttribute_Object?&
  MetadataPacketPreference_Object?&
  Link_Object*&
  ClippingPathSettings_Object?&
  GraphicLayerOption_Object?&
  AnimationSetting_Object?&
  TimingSetting_Object?
)
}

PDFAttribute_Object = element PDFAttribute {
  attribute PageNumber { xsd:int }?,
  attribute PDFCrop { PDFCrop_EnumValue }?,
  attribute TransparentBackground { xsd:boolean }?
}

ImportedPage_Object = element ImportedPage {
  attribute Self { xsd:string },
  attribute PageNumber { xsd:int }?,
  attribute ImportedPageCrop { ImportedPageCropOptions_EnumValue }?,
  attribute Nonprinting { xsd:boolean }?,
  attribute LocalDisplaySetting { DisplaySettingOptions_EnumValue }?,
  attribute ImageTypeName { xsd:string }?,
  attribute AppliedObjectStyle { xsd:string }?,
  attribute ItemTransform { TransformationMatrixType_TypeDef }?,
  attribute FillColor { xsd:string }?,
  attribute FillTint { xsd:double }?,
  attribute OverprintFill { xsd:boolean }?,
  attribute CornerRadius { xsd:double }?,
  attribute StrokeWeight { xsd:double }?,
  attribute MiterLimit { xsd:double {minInclusive="1" maxInclusive="500"} }?,
  attribute EndCap { EndCap_EnumValue }?,
  attribute EndJoin { EndJoin_EnumValue }?,
  attribute StrokeType { xsd:string }?,
  attribute StrokeCornerAdjustment { StrokeCornerAdjustment_EnumValue }?,
  attribute StrokeDashAndGap { list { xsd:double * } }?,
  attribute LeftLineEnd { ArrowHead_EnumValue }?,
  attribute RightLineEnd { ArrowHead_EnumValue }?,
  attribute StrokeColor { xsd:string }?,
  attribute StrokeTint { xsd:double }?,
  attribute GradientFillStart { UnitPointType_TypeDef }?,
  attribute GradientFillLength { xsd:double }?,
  attribute GradientFillAngle { xsd:double }?,
  attribute GradientStrokeStart { UnitPointType_TypeDef }?,
  attribute GradientStrokeLength { xsd:double }?,
  attribute GradientStrokeAngle { xsd:double }?,
  attribute OverprintStroke { xsd:boolean }?,
  attribute GapColor { xsd:string }?,
  attribute GapTint { xsd:double }?,
  attribute OverprintGap { xsd:boolean }?,
  attribute StrokeAlignment { StrokeAlignment_EnumValue }?,
  attribute ItemLayer { xsd:string }?,
  attribute Locked { xsd:boolean }?,
  attribute GradientFillHiliteLength { xsd:double }?,
  attribute GradientFillHiliteAngle { xsd:double }?,
  attribute GradientStrokeHiliteLength { xsd:double }?,
  attribute GradientStrokeHiliteAngle { xsd:double }?,
  attribute CornerOption { CornerOptions_EnumValue }?,
  attribute Visible { xsd:boolean }?,
  attribute Name { xsd:string }?,
  attribute TopLeftCornerOption { CornerOptions_EnumValue }?,
  attribute TopRightCornerOption { CornerOptions_EnumValue }?,
  attribute BottomLeftCornerOption { CornerOptions_EnumValue }?,
  attribute BottomRightCornerOption { CornerOptions_EnumValue }?,
  attribute TopLeftCornerRadius { xsd:double }?,
  attribute TopRightCornerRadius { xsd:double }?,
  attribute BottomLeftCornerRadius { xsd:double }?,
  attribute BottomRightCornerRadius { xsd:double }?,
  element Properties {
    element Contents { text }?&
    element GraphicProxy { text }?&
    element ClippingPathGeometry { element GeometryPathType { GeometryPathType_TypeDef }* 
    }?&
    element GraphicBounds { RectangleBoundsType_TypeDef }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  TransparencySetting_Object?&
  TextWrapPreference_Object?&
  MetadataPacketPreference_Object?&
  GraphicLayerOption_Object?&
  ClippingPathSettings_Object?&
  PDFAttribute_Object?&
  Link_Object*&
  AnimationSetting_Object?&
  TimingSetting_Object?
)
}

Rectangle_Object = element Rectangle {
  attribute Self { xsd:string },
  attribute ContentType { ContentType_EnumValue }?,
  attribute StoryTitle { xsd:string }?,
  attribute AllowOverrides { xsd:boolean }?,
  attribute FillColor { xsd:string }?,
  attribute FillTint { xsd:double }?,
  attribute OverprintFill { xsd:boolean }?,
  attribute CornerRadius { xsd:double }?,
  attribute StrokeWeight { xsd:double }?,
  attribute MiterLimit { xsd:double {minInclusive="1" maxInclusive="500"} }?,
  attribute EndCap { EndCap_EnumValue }?,
  attribute EndJoin { EndJoin_EnumValue }?,
  attribute StrokeType { xsd:string }?,
  attribute StrokeCornerAdjustment { StrokeCornerAdjustment_EnumValue }?,
  attribute StrokeDashAndGap { list { xsd:double * } }?,
  attribute LeftLineEnd { ArrowHead_EnumValue }?,
  attribute RightLineEnd { ArrowHead_EnumValue }?,
  attribute StrokeColor { xsd:string }?,
  attribute StrokeTint { xsd:double }?,
  attribute GradientFillStart { UnitPointType_TypeDef }?,
  attribute GradientFillLength { xsd:double }?,
  attribute GradientFillAngle { xsd:double }?,
  attribute GradientStrokeStart { UnitPointType_TypeDef }?,
  attribute GradientStrokeLength { xsd:double }?,
  attribute GradientStrokeAngle { xsd:double }?,
  attribute OverprintStroke { xsd:boolean }?,
  attribute GapColor { xsd:string }?,
  attribute GapTint { xsd:double }?,
  attribute OverprintGap { xsd:boolean }?,
  attribute StrokeAlignment { StrokeAlignment_EnumValue }?,
  attribute Nonprinting { xsd:boolean }?,
  attribute ItemLayer { xsd:string }?,
  attribute Locked { xsd:boolean }?,
  attribute LocalDisplaySetting { DisplaySettingOptions_EnumValue }?,
  attribute GradientFillHiliteLength { xsd:double }?,
  attribute GradientFillHiliteAngle { xsd:double }?,
  attribute GradientStrokeHiliteLength { xsd:double }?,
  attribute GradientStrokeHiliteAngle { xsd:double }?,
  attribute AppliedObjectStyle { xsd:string }?,
  attribute CornerOption { CornerOptions_EnumValue }?,
  attribute Visible { xsd:boolean }?,
  attribute Name { xsd:string }?,
  attribute TopLeftCornerOption { CornerOptions_EnumValue }?,
  attribute TopRightCornerOption { CornerOptions_EnumValue }?,
  attribute BottomLeftCornerOption { CornerOptions_EnumValue }?,
  attribute BottomRightCornerOption { CornerOptions_EnumValue }?,
  attribute TopLeftCornerRadius { xsd:double }?,
  attribute TopRightCornerRadius { xsd:double }?,
  attribute BottomLeftCornerRadius { xsd:double }?,
  attribute BottomRightCornerRadius { xsd:double }?,
  attribute ItemTransform { TransformationMatrixType_TypeDef }?,
  element Properties {
    element PathGeometry { element GeometryPathType { GeometryPathType_TypeDef }* 
    }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  TextPath_Object*,
  (TransparencySetting_Object?&
  StrokeTransparencySetting_Object?&
  FillTransparencySetting_Object?&
  AnchoredObjectSetting_Object?&
  TextWrapPreference_Object?&
  InCopyExportOption_Object?&
  FrameFittingOption_Object?&
  AnimationSetting_Object?&
  TimingSetting_Object?),
  (Oval_Object*&
  Rectangle_Object*&
  GraphicLine_Object*&
  TextFrame_Object*&
  Polygon_Object*&
  Sound_Object*&
  Movie_Object*&
  Link_Object*&
  Graphic_Object*&
  Image_Object*&
  EPS_Object*&
  WMF_Object*&
  PICT_Object*&
  PDF_Object*&
  Group_Object*&
  EPSText_Object*&
  FormField_Object*&
  Button_Object*&
  MultiStateObject_Object*&
  ImportedPage_Object*)
)
}

GraphicLine_Object = element GraphicLine {
  attribute Self { xsd:string },
  attribute ContentType { ContentType_EnumValue }?,
  attribute LockState { LockStateValues_EnumValue }?,
  attribute AllowOverrides { xsd:boolean }?,
  attribute FillColor { xsd:string }?,
  attribute FillTint { xsd:double }?,
  attribute OverprintFill { xsd:boolean }?,
  attribute CornerRadius { xsd:double }?,
  attribute StrokeWeight { xsd:double }?,
  attribute MiterLimit { xsd:double {minInclusive="1" maxInclusive="500"} }?,
  attribute EndCap { EndCap_EnumValue }?,
  attribute EndJoin { EndJoin_EnumValue }?,
  attribute StrokeType { xsd:string }?,
  attribute StrokeCornerAdjustment { StrokeCornerAdjustment_EnumValue }?,
  attribute StrokeDashAndGap { list { xsd:double * } }?,
  attribute LeftLineEnd { ArrowHead_EnumValue }?,
  attribute RightLineEnd { ArrowHead_EnumValue }?,
  attribute StrokeColor { xsd:string }?,
  attribute StrokeTint { xsd:double }?,
  attribute GradientFillStart { UnitPointType_TypeDef }?,
  attribute GradientFillLength { xsd:double }?,
  attribute GradientFillAngle { xsd:double }?,
  attribute GradientStrokeStart { UnitPointType_TypeDef }?,
  attribute GradientStrokeLength { xsd:double }?,
  attribute GradientStrokeAngle { xsd:double }?,
  attribute OverprintStroke { xsd:boolean }?,
  attribute GapColor { xsd:string }?,
  attribute GapTint { xsd:double }?,
  attribute OverprintGap { xsd:boolean }?,
  attribute StrokeAlignment { StrokeAlignment_EnumValue }?,
  attribute Nonprinting { xsd:boolean }?,
  attribute ItemLayer { xsd:string }?,
  attribute Locked { xsd:boolean }?,
  attribute LocalDisplaySetting { DisplaySettingOptions_EnumValue }?,
  attribute GradientFillHiliteLength { xsd:double }?,
  attribute GradientFillHiliteAngle { xsd:double }?,
  attribute GradientStrokeHiliteLength { xsd:double }?,
  attribute GradientStrokeHiliteAngle { xsd:double }?,
  attribute AppliedObjectStyle { xsd:string }?,
  attribute CornerOption { CornerOptions_EnumValue }?,
  attribute Visible { xsd:boolean }?,
  attribute Name { xsd:string }?,
  attribute TopLeftCornerOption { CornerOptions_EnumValue }?,
  attribute TopRightCornerOption { CornerOptions_EnumValue }?,
  attribute BottomLeftCornerOption { CornerOptions_EnumValue }?,
  attribute BottomRightCornerOption { CornerOptions_EnumValue }?,
  attribute TopLeftCornerRadius { xsd:double }?,
  attribute TopRightCornerRadius { xsd:double }?,
  attribute BottomLeftCornerRadius { xsd:double }?,
  attribute BottomRightCornerRadius { xsd:double }?,
  attribute ItemTransform { TransformationMatrixType_TypeDef }?,
  element Properties {
    element PathGeometry { element GeometryPathType { GeometryPathType_TypeDef }* 
    }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  TextPath_Object*,
  (TransparencySetting_Object?&
  StrokeTransparencySetting_Object?&
  FillTransparencySetting_Object?&
  AnchoredObjectSetting_Object?&
  TextWrapPreference_Object?&
  AnimationSetting_Object?&
  TimingSetting_Object?),
  (Oval_Object*&
  Rectangle_Object*&
  GraphicLine_Object*&
  TextFrame_Object*&
  Polygon_Object*&
  Sound_Object*&
  Movie_Object*&
  Graphic_Object*&
  Image_Object*&
  EPS_Object*&
  WMF_Object*&
  PICT_Object*&
  PDF_Object*&
  Group_Object*&
  EPSText_Object*&
  FormField_Object*&
  Button_Object*&
  MultiStateObject_Object*&
  ImportedPage_Object*)
)
}

TextFrame_Object = element TextFrame {
  attribute Self { xsd:string },
  attribute ParentStory { xsd:string }?,
  attribute PreviousTextFrame { xsd:string }?,
  attribute NextTextFrame { xsd:string }?,
  attribute ContentType { ContentType_EnumValue }?,
  attribute AllowOverrides { xsd:boolean }?,
  attribute FillColor { xsd:string }?,
  attribute FillTint { xsd:double }?,
  attribute OverprintFill { xsd:boolean }?,
  attribute CornerRadius { xsd:double }?,
  attribute StrokeWeight { xsd:double }?,
  attribute MiterLimit { xsd:double {minInclusive="1" maxInclusive="500"} }?,
  attribute EndCap { EndCap_EnumValue }?,
  attribute EndJoin { EndJoin_EnumValue }?,
  attribute StrokeType { xsd:string }?,
  attribute StrokeCornerAdjustment { StrokeCornerAdjustment_EnumValue }?,
  attribute StrokeDashAndGap { list { xsd:double * } }?,
  attribute LeftLineEnd { ArrowHead_EnumValue }?,
  attribute RightLineEnd { ArrowHead_EnumValue }?,
  attribute StrokeColor { xsd:string }?,
  attribute StrokeTint { xsd:double }?,
  attribute GradientFillStart { UnitPointType_TypeDef }?,
  attribute GradientFillLength { xsd:double }?,
  attribute GradientFillAngle { xsd:double }?,
  attribute GradientStrokeStart { UnitPointType_TypeDef }?,
  attribute GradientStrokeLength { xsd:double }?,
  attribute GradientStrokeAngle { xsd:double }?,
  attribute OverprintStroke { xsd:boolean }?,
  attribute GapColor { xsd:string }?,
  attribute GapTint { xsd:double }?,
  attribute OverprintGap { xsd:boolean }?,
  attribute StrokeAlignment { StrokeAlignment_EnumValue }?,
  attribute Nonprinting { xsd:boolean }?,
  attribute ItemLayer { xsd:string }?,
  attribute Locked { xsd:boolean }?,
  attribute LocalDisplaySetting { DisplaySettingOptions_EnumValue }?,
  attribute GradientFillHiliteLength { xsd:double }?,
  attribute GradientFillHiliteAngle { xsd:double }?,
  attribute GradientStrokeHiliteLength { xsd:double }?,
  attribute GradientStrokeHiliteAngle { xsd:double }?,
  attribute AppliedObjectStyle { xsd:string }?,
  attribute CornerOption { CornerOptions_EnumValue }?,
  attribute Visible { xsd:boolean }?,
  attribute Name { xsd:string }?,
  attribute TopLeftCornerOption { CornerOptions_EnumValue }?,
  attribute TopRightCornerOption { CornerOptions_EnumValue }?,
  attribute BottomLeftCornerOption { CornerOptions_EnumValue }?,
  attribute BottomRightCornerOption { CornerOptions_EnumValue }?,
  attribute TopLeftCornerRadius { xsd:double }?,
  attribute TopRightCornerRadius { xsd:double }?,
  attribute BottomLeftCornerRadius { xsd:double }?,
  attribute BottomRightCornerRadius { xsd:double }?,
  attribute ItemTransform { TransformationMatrixType_TypeDef }?,
  element Properties {
    element PathGeometry { element GeometryPathType { GeometryPathType_TypeDef }* 
    }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  (TextPath_Object*&
  GridDataInformation_Object?),
  (TransparencySetting_Object?&
  StrokeTransparencySetting_Object?&
  FillTransparencySetting_Object?&
  ContentTransparencySetting_Object?&
  TextFramePreference_Object?&
  AnchoredObjectSetting_Object?&
  BaselineFrameGridOption_Object?&
  TextWrapPreference_Object?&
  AnimationSetting_Object?&
  TimingSetting_Object?)
)
}

ContentTransparencySetting_Object = element ContentTransparencySetting {
(
  BlendingSetting_Object?&
  DropShadowSetting_Object?&
  FeatherSetting_Object?&
  InnerShadowSetting_Object?&
  OuterGlowSetting_Object?&
  InnerGlowSetting_Object?&
  BevelAndEmbossSetting_Object?&
  SatinSetting_Object?&
  DirectionalFeatherSetting_Object?&
  GradientFeatherSetting_Object?
)
}

TextFramePreference_Object = element TextFramePreference {
  attribute TextColumnCount { xsd:int {minInclusive="1" maxInclusive="40"} }?,
  attribute TextColumnGutter { xsd:double {minInclusive="0" maxInclusive="8640"} }?,
  attribute TextColumnFixedWidth { xsd:double {minInclusive="0" maxInclusive="8640"} }?,
  attribute UseFixedColumnWidth { xsd:boolean }?,
  attribute FirstBaselineOffset { FirstBaseline_EnumValue }?,
  attribute MinimumFirstBaselineOffset { xsd:double {minInclusive="0" maxInclusive="8640"} }?,
  attribute VerticalJustification { VerticalJustification_EnumValue }?,
  attribute VerticalThreshold { xsd:double {minInclusive="0" maxInclusive="8640"} }?,
  attribute IgnoreWrap { xsd:boolean }?,
  attribute VerticalBalanceColumns { xsd:boolean }?,
  element Properties {
    element InsetSpacing { 
      (unit_type, xsd:double {minInclusive="0" maxInclusive="8640"} ) |
      (list_type, 
      element ListItem { unit_type, xsd:double {minInclusive="0" maxInclusive="8640"} },
      element ListItem { unit_type, xsd:double {minInclusive="0" maxInclusive="8640"} },
      element ListItem { unit_type, xsd:double {minInclusive="0" maxInclusive="8640"} },
      element ListItem { unit_type, xsd:double {minInclusive="0" maxInclusive="8640"} })
    }?
  }
  ?
}

BaselineFrameGridOption_Object = element BaselineFrameGridOption {
  attribute UseCustomBaselineFrameGrid { xsd:boolean }?,
  attribute StartingOffsetForBaselineFrameGrid { xsd:double {minInclusive="0" maxInclusive="8640"} }?,
  attribute BaselineFrameGridRelativeOption { BaselineFrameGridRelativeOption_EnumValue }?,
  attribute BaselineFrameGridIncrement { xsd:double {minInclusive="1" maxInclusive="8640"} }?,
  element Properties {
    element BaselineFrameGridColor { InDesignUIColorType_TypeDef }?
  }
  ?
}

Polygon_Object = element Polygon {
  attribute Self { xsd:string },
  attribute ContentType { ContentType_EnumValue }?,
  attribute StoryTitle { xsd:string }?,
  attribute AllowOverrides { xsd:boolean }?,
  attribute FillColor { xsd:string }?,
  attribute FillTint { xsd:double }?,
  attribute OverprintFill { xsd:boolean }?,
  attribute CornerRadius { xsd:double }?,
  attribute StrokeWeight { xsd:double }?,
  attribute MiterLimit { xsd:double {minInclusive="1" maxInclusive="500"} }?,
  attribute EndCap { EndCap_EnumValue }?,
  attribute EndJoin { EndJoin_EnumValue }?,
  attribute StrokeType { xsd:string }?,
  attribute StrokeCornerAdjustment { StrokeCornerAdjustment_EnumValue }?,
  attribute StrokeDashAndGap { list { xsd:double * } }?,
  attribute LeftLineEnd { ArrowHead_EnumValue }?,
  attribute RightLineEnd { ArrowHead_EnumValue }?,
  attribute StrokeColor { xsd:string }?,
  attribute StrokeTint { xsd:double }?,
  attribute GradientFillStart { UnitPointType_TypeDef }?,
  attribute GradientFillLength { xsd:double }?,
  attribute GradientFillAngle { xsd:double }?,
  attribute GradientStrokeStart { UnitPointType_TypeDef }?,
  attribute GradientStrokeLength { xsd:double }?,
  attribute GradientStrokeAngle { xsd:double }?,
  attribute OverprintStroke { xsd:boolean }?,
  attribute GapColor { xsd:string }?,
  attribute GapTint { xsd:double }?,
  attribute OverprintGap { xsd:boolean }?,
  attribute StrokeAlignment { StrokeAlignment_EnumValue }?,
  attribute Nonprinting { xsd:boolean }?,
  attribute ItemLayer { xsd:string }?,
  attribute Locked { xsd:boolean }?,
  attribute LocalDisplaySetting { DisplaySettingOptions_EnumValue }?,
  attribute GradientFillHiliteLength { xsd:double }?,
  attribute GradientFillHiliteAngle { xsd:double }?,
  attribute GradientStrokeHiliteLength { xsd:double }?,
  attribute GradientStrokeHiliteAngle { xsd:double }?,
  attribute AppliedObjectStyle { xsd:string }?,
  attribute CornerOption { CornerOptions_EnumValue }?,
  attribute Visible { xsd:boolean }?,
  attribute Name { xsd:string }?,
  attribute TopLeftCornerOption { CornerOptions_EnumValue }?,
  attribute TopRightCornerOption { CornerOptions_EnumValue }?,
  attribute BottomLeftCornerOption { CornerOptions_EnumValue }?,
  attribute BottomRightCornerOption { CornerOptions_EnumValue }?,
  attribute TopLeftCornerRadius { xsd:double }?,
  attribute TopRightCornerRadius { xsd:double }?,
  attribute BottomLeftCornerRadius { xsd:double }?,
  attribute BottomRightCornerRadius { xsd:double }?,
  attribute ItemTransform { TransformationMatrixType_TypeDef }?,
  element Properties {
    element PathGeometry { element GeometryPathType { GeometryPathType_TypeDef }* 
    }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  TextPath_Object*,
  (TransparencySetting_Object?&
  StrokeTransparencySetting_Object?&
  FillTransparencySetting_Object?&
  AnchoredObjectSetting_Object?&
  TextWrapPreference_Object?&
  InCopyExportOption_Object?&
  FrameFittingOption_Object?&
  AnimationSetting_Object?&
  TimingSetting_Object?),
  (Oval_Object*&
  Rectangle_Object*&
  GraphicLine_Object*&
  TextFrame_Object*&
  Polygon_Object*&
  Sound_Object*&
  Movie_Object*&
  Link_Object*&
  Graphic_Object*&
  Image_Object*&
  EPS_Object*&
  WMF_Object*&
  PICT_Object*&
  PDF_Object*&
  Group_Object*&
  EPSText_Object*&
  FormField_Object*&
  Button_Object*&
  MultiStateObject_Object*&
  ImportedPage_Object*)
)
}

Group_Object = element Group {
  attribute Self { xsd:string },
  attribute AllowOverrides { xsd:boolean }?,
  attribute FillColor { xsd:string }?,
  attribute FillTint { xsd:double }?,
  attribute OverprintFill { xsd:boolean }?,
  attribute CornerRadius { xsd:double }?,
  attribute StrokeWeight { xsd:double }?,
  attribute MiterLimit { xsd:double {minInclusive="1" maxInclusive="500"} }?,
  attribute EndCap { EndCap_EnumValue }?,
  attribute EndJoin { EndJoin_EnumValue }?,
  attribute StrokeType { xsd:string }?,
  attribute StrokeCornerAdjustment { StrokeCornerAdjustment_EnumValue }?,
  attribute StrokeDashAndGap { list { xsd:double * } }?,
  attribute LeftLineEnd { ArrowHead_EnumValue }?,
  attribute RightLineEnd { ArrowHead_EnumValue }?,
  attribute StrokeColor { xsd:string }?,
  attribute StrokeTint { xsd:double }?,
  attribute GradientFillStart { UnitPointType_TypeDef }?,
  attribute GradientFillLength { xsd:double }?,
  attribute GradientFillAngle { xsd:double }?,
  attribute GradientStrokeStart { UnitPointType_TypeDef }?,
  attribute GradientStrokeLength { xsd:double }?,
  attribute GradientStrokeAngle { xsd:double }?,
  attribute OverprintStroke { xsd:boolean }?,
  attribute GapColor { xsd:string }?,
  attribute GapTint { xsd:double }?,
  attribute OverprintGap { xsd:boolean }?,
  attribute StrokeAlignment { StrokeAlignment_EnumValue }?,
  attribute Nonprinting { xsd:boolean }?,
  attribute ItemLayer { xsd:string }?,
  attribute Locked { xsd:boolean }?,
  attribute LocalDisplaySetting { DisplaySettingOptions_EnumValue }?,
  attribute GradientFillHiliteLength { xsd:double }?,
  attribute GradientFillHiliteAngle { xsd:double }?,
  attribute GradientStrokeHiliteLength { xsd:double }?,
  attribute GradientStrokeHiliteAngle { xsd:double }?,
  attribute AppliedObjectStyle { xsd:string }?,
  attribute CornerOption { CornerOptions_EnumValue }?,
  attribute Visible { xsd:boolean }?,
  attribute Name { xsd:string }?,
  attribute TopLeftCornerOption { CornerOptions_EnumValue }?,
  attribute TopRightCornerOption { CornerOptions_EnumValue }?,
  attribute BottomLeftCornerOption { CornerOptions_EnumValue }?,
  attribute BottomRightCornerOption { CornerOptions_EnumValue }?,
  attribute TopLeftCornerRadius { xsd:double }?,
  attribute TopRightCornerRadius { xsd:double }?,
  attribute BottomLeftCornerRadius { xsd:double }?,
  attribute BottomRightCornerRadius { xsd:double }?,
  attribute ItemTransform { TransformationMatrixType_TypeDef }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  (TransparencySetting_Object?&
  StrokeTransparencySetting_Object?&
  FillTransparencySetting_Object?&
  AnchoredObjectSetting_Object?&
  TextWrapPreference_Object?&
  AnimationSetting_Object?),
  TimingSetting_Object?,
  (Oval_Object*&
  Rectangle_Object*&
  GraphicLine_Object*&
  TextFrame_Object*&
  Polygon_Object*&
  Graphic_Object*&
  Image_Object*&
  EPS_Object*&
  WMF_Object*&
  PICT_Object*&
  PDF_Object*&
  Group_Object*&
  EPSText_Object*&
  FormField_Object*&
  Button_Object*&
  MultiStateObject_Object*&
  ImportedPage_Object*)
)
}

EPSText_Object = element EPSText {
  attribute Self { xsd:string },
  attribute StrokeType { xsd:string }?,
  attribute StrokeDashAndGap { list { xsd:double * } }?,
  attribute AllowOverrides { xsd:boolean }?,
  attribute FillColor { xsd:string }?,
  attribute FillTint { xsd:double }?,
  attribute OverprintFill { xsd:boolean }?,
  attribute CornerRadius { xsd:double }?,
  attribute StrokeWeight { xsd:double }?,
  attribute MiterLimit { xsd:double {minInclusive="1" maxInclusive="500"} }?,
  attribute EndCap { EndCap_EnumValue }?,
  attribute EndJoin { EndJoin_EnumValue }?,
  attribute StrokeCornerAdjustment { StrokeCornerAdjustment_EnumValue }?,
  attribute LeftLineEnd { ArrowHead_EnumValue }?,
  attribute RightLineEnd { ArrowHead_EnumValue }?,
  attribute StrokeColor { xsd:string }?,
  attribute StrokeTint { xsd:double }?,
  attribute GradientFillStart { UnitPointType_TypeDef }?,
  attribute GradientFillLength { xsd:double }?,
  attribute GradientFillAngle { xsd:double }?,
  attribute GradientStrokeStart { UnitPointType_TypeDef }?,
  attribute GradientStrokeLength { xsd:double }?,
  attribute GradientStrokeAngle { xsd:double }?,
  attribute OverprintStroke { xsd:boolean }?,
  attribute GapColor { xsd:string }?,
  attribute GapTint { xsd:double }?,
  attribute OverprintGap { xsd:boolean }?,
  attribute StrokeAlignment { StrokeAlignment_EnumValue }?,
  attribute Nonprinting { xsd:boolean }?,
  attribute ItemLayer { xsd:string }?,
  attribute Locked { xsd:boolean }?,
  attribute LocalDisplaySetting { DisplaySettingOptions_EnumValue }?,
  attribute GradientFillHiliteLength { xsd:double }?,
  attribute GradientFillHiliteAngle { xsd:double }?,
  attribute GradientStrokeHiliteLength { xsd:double }?,
  attribute GradientStrokeHiliteAngle { xsd:double }?,
  attribute AppliedObjectStyle { xsd:string }?,
  attribute CornerOption { CornerOptions_EnumValue }?,
  attribute Visible { xsd:boolean }?,
  attribute Name { xsd:string }?,
  attribute TopLeftCornerOption { CornerOptions_EnumValue }?,
  attribute TopRightCornerOption { CornerOptions_EnumValue }?,
  attribute BottomLeftCornerOption { CornerOptions_EnumValue }?,
  attribute BottomRightCornerOption { CornerOptions_EnumValue }?,
  attribute TopLeftCornerRadius { xsd:double }?,
  attribute TopRightCornerRadius { xsd:double }?,
  attribute BottomLeftCornerRadius { xsd:double }?,
  attribute BottomRightCornerRadius { xsd:double }?,
  attribute ItemTransform { TransformationMatrixType_TypeDef }?,
  element Properties {
    element PathBoundingBox { RectangleBoundsType_TypeDef }?&
    element EPSTextData { text }?&
    element EPSTextAttributeBounds { UnitRectangleBoundsType_TypeDef }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  TransparencySetting_Object?&
  AnchoredObjectSetting_Object?&
  TextWrapPreference_Object?&
  TextPath_Object*&
  AnimationSetting_Object?&
  TimingSetting_Object?
)
}

FormField_Object = element FormField {
  attribute Self { xsd:string },
  attribute Name { xsd:string }?,
  attribute Description { xsd:string }?,
  attribute VisibilityInPdf { VisibilityInPdf_EnumValue }?,
  attribute AllowOverrides { xsd:boolean }?,
  attribute FillColor { xsd:string }?,
  attribute FillTint { xsd:double }?,
  attribute OverprintFill { xsd:boolean }?,
  attribute CornerRadius { xsd:double }?,
  attribute StrokeWeight { xsd:double }?,
  attribute MiterLimit { xsd:double {minInclusive="1" maxInclusive="500"} }?,
  attribute EndCap { EndCap_EnumValue }?,
  attribute EndJoin { EndJoin_EnumValue }?,
  attribute StrokeType { xsd:string }?,
  attribute StrokeCornerAdjustment { StrokeCornerAdjustment_EnumValue }?,
  attribute StrokeDashAndGap { list { xsd:double * } }?,
  attribute LeftLineEnd { ArrowHead_EnumValue }?,
  attribute RightLineEnd { ArrowHead_EnumValue }?,
  attribute StrokeColor { xsd:string }?,
  attribute StrokeTint { xsd:double }?,
  attribute GradientFillStart { UnitPointType_TypeDef }?,
  attribute GradientFillLength { xsd:double }?,
  attribute GradientFillAngle { xsd:double }?,
  attribute GradientStrokeStart { UnitPointType_TypeDef }?,
  attribute GradientStrokeLength { xsd:double }?,
  attribute GradientStrokeAngle { xsd:double }?,
  attribute OverprintStroke { xsd:boolean }?,
  attribute GapColor { xsd:string }?,
  attribute GapTint { xsd:double }?,
  attribute OverprintGap { xsd:boolean }?,
  attribute StrokeAlignment { StrokeAlignment_EnumValue }?,
  attribute Nonprinting { xsd:boolean }?,
  attribute ItemLayer { xsd:string }?,
  attribute Locked { xsd:boolean }?,
  attribute LocalDisplaySetting { DisplaySettingOptions_EnumValue }?,
  attribute GradientFillHiliteLength { xsd:double }?,
  attribute GradientFillHiliteAngle { xsd:double }?,
  attribute GradientStrokeHiliteLength { xsd:double }?,
  attribute GradientStrokeHiliteAngle { xsd:double }?,
  attribute AppliedObjectStyle { xsd:string }?,
  attribute CornerOption { CornerOptions_EnumValue }?,
  attribute Visible { xsd:boolean }?,
  attribute TopLeftCornerOption { CornerOptions_EnumValue }?,
  attribute TopRightCornerOption { CornerOptions_EnumValue }?,
  attribute BottomLeftCornerOption { CornerOptions_EnumValue }?,
  attribute BottomRightCornerOption { CornerOptions_EnumValue }?,
  attribute TopLeftCornerRadius { xsd:double }?,
  attribute TopRightCornerRadius { xsd:double }?,
  attribute BottomLeftCornerRadius { xsd:double }?,
  attribute BottomRightCornerRadius { xsd:double }?,
  attribute ItemTransform { TransformationMatrixType_TypeDef }?,
  element Properties {
    element PathBoundingBox { RectangleBoundsType_TypeDef }?&
    element PathGeometry { element GeometryPathType { GeometryPathType_TypeDef }* 
    }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  TransparencySetting_Object?&
  AnchoredObjectSetting_Object?&
  TextWrapPreference_Object?&
  AnimationSetting_Object?&
  TimingSetting_Object?&
  Behavior_Object*&
  GotoFirstPageBehavior_Object*&
  GotoLastPageBehavior_Object*&
  GotoNextPageBehavior_Object*&
  GotoPreviousPageBehavior_Object*&
  GotoNextViewBehavior_Object*&
  GotoPreviousViewBehavior_Object*&
  GotoURLBehavior_Object*&
  GotoAnchorBehavior_Object*&
  MovieBehavior_Object*&
  SoundBehavior_Object*&
  ShowHideFieldsBehavior_Object*&
  OpenFileBehavior_Object*&
  ViewZoomBehavior_Object*&
  CloseWindowBehavior_Object*&
  QuitBehavior_Object*&
  GotoPageBehavior_Object*
)
}

Behavior_Object = element Behavior {
  attribute Self { xsd:string },
  attribute Name { xsd:string }?,
  attribute EnableBehavior { xsd:boolean }?,
  attribute BehaviorEvent { BehaviorEvents_EnumValue }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

GotoFirstPageBehavior_Object = element GotoFirstPageBehavior {
  attribute Self { xsd:string },
  attribute ZoomSetting { GoToZoomOptions_EnumValue }?,
  attribute Name { xsd:string }?,
  attribute EnableBehavior { xsd:boolean }?,
  attribute BehaviorEvent { BehaviorEvents_EnumValue }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

GotoLastPageBehavior_Object = element GotoLastPageBehavior {
  attribute Self { xsd:string },
  attribute ZoomSetting { GoToZoomOptions_EnumValue }?,
  attribute Name { xsd:string }?,
  attribute EnableBehavior { xsd:boolean }?,
  attribute BehaviorEvent { BehaviorEvents_EnumValue }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

GotoNextPageBehavior_Object = element GotoNextPageBehavior {
  attribute Self { xsd:string },
  attribute ZoomSetting { GoToZoomOptions_EnumValue }?,
  attribute Name { xsd:string }?,
  attribute EnableBehavior { xsd:boolean }?,
  attribute BehaviorEvent { BehaviorEvents_EnumValue }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

GotoPreviousPageBehavior_Object = element GotoPreviousPageBehavior {
  attribute Self { xsd:string },
  attribute ZoomSetting { GoToZoomOptions_EnumValue }?,
  attribute Name { xsd:string }?,
  attribute EnableBehavior { xsd:boolean }?,
  attribute BehaviorEvent { BehaviorEvents_EnumValue }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

GotoNextViewBehavior_Object = element GotoNextViewBehavior {
  attribute Self { xsd:string },
  attribute ZoomSetting { GoToZoomOptions_EnumValue }?,
  attribute Name { xsd:string }?,
  attribute EnableBehavior { xsd:boolean }?,
  attribute BehaviorEvent { BehaviorEvents_EnumValue }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

GotoPreviousViewBehavior_Object = element GotoPreviousViewBehavior {
  attribute Self { xsd:string },
  attribute ZoomSetting { GoToZoomOptions_EnumValue }?,
  attribute Name { xsd:string }?,
  attribute EnableBehavior { xsd:boolean }?,
  attribute BehaviorEvent { BehaviorEvents_EnumValue }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

GotoURLBehavior_Object = element GotoURLBehavior {
  attribute Self { xsd:string },
  attribute URL { xsd:string }?,
  attribute Name { xsd:string }?,
  attribute EnableBehavior { xsd:boolean }?,
  attribute BehaviorEvent { BehaviorEvents_EnumValue }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

GotoAnchorBehavior_Object = element GotoAnchorBehavior {
  attribute Self { xsd:string },
  attribute AnchorName { xsd:string }?,
  attribute ZoomSetting { GoToZoomOptions_EnumValue }?,
  attribute FilePath { xsd:string }?,
  attribute Name { xsd:string }?,
  attribute EnableBehavior { xsd:boolean }?,
  attribute BehaviorEvent { BehaviorEvents_EnumValue }?,
  element Properties {
    element AnchorItem { 
      (object_type, xsd:string ) |
      (long_type, xsd:int )
    }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

MovieBehavior_Object = element MovieBehavior {
  attribute Self { xsd:string },
  attribute MovieItem { xsd:string }?,
  attribute NavigationPointID { xsd:int }?,
  attribute Operation { MoviePlayOperations_EnumValue }?,
  attribute Name { xsd:string }?,
  attribute EnableBehavior { xsd:boolean }?,
  attribute BehaviorEvent { BehaviorEvents_EnumValue }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

SoundBehavior_Object = element SoundBehavior {
  attribute Self { xsd:string },
  attribute SoundItem { xsd:string }?,
  attribute Operation { PlayOperations_EnumValue }?,
  attribute Name { xsd:string }?,
  attribute EnableBehavior { xsd:boolean }?,
  attribute BehaviorEvent { BehaviorEvents_EnumValue }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

ShowHideFieldsBehavior_Object = element ShowHideFieldsBehavior {
  attribute Self { xsd:string },
  attribute FieldsToHide { list { xsd:string * } }?,
  attribute FieldsToShow { list { xsd:string * } }?,
  attribute Name { xsd:string }?,
  attribute EnableBehavior { xsd:boolean }?,
  attribute BehaviorEvent { BehaviorEvents_EnumValue }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

OpenFileBehavior_Object = element OpenFileBehavior {
  attribute Self { xsd:string },
  attribute FilePath { xsd:string }?,
  attribute Name { xsd:string }?,
  attribute EnableBehavior { xsd:boolean }?,
  attribute BehaviorEvent { BehaviorEvents_EnumValue }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

ViewZoomBehavior_Object = element ViewZoomBehavior {
  attribute Self { xsd:string },
  attribute ViewZoomStyle { ViewZoomStyle_EnumValue }?,
  attribute Name { xsd:string }?,
  attribute EnableBehavior { xsd:boolean }?,
  attribute BehaviorEvent { BehaviorEvents_EnumValue }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

CloseWindowBehavior_Object = element CloseWindowBehavior {
  attribute Self { xsd:string },
  attribute Name { xsd:string }?,
  attribute EnableBehavior { xsd:boolean }?,
  attribute BehaviorEvent { BehaviorEvents_EnumValue }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

QuitBehavior_Object = element QuitBehavior {
  attribute Self { xsd:string },
  attribute Name { xsd:string }?,
  attribute EnableBehavior { xsd:boolean }?,
  attribute BehaviorEvent { BehaviorEvents_EnumValue }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

GotoPageBehavior_Object = element GotoPageBehavior {
  attribute Self { xsd:string },
  attribute ZoomSetting { GoToZoomOptions_EnumValue }?,
  attribute PageNumber { xsd:int }?,
  attribute Name { xsd:string }?,
  attribute EnableBehavior { xsd:boolean }?,
  attribute BehaviorEvent { BehaviorEvents_EnumValue }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

Button_Object = element Button {
  attribute Self { xsd:string },
  attribute VisibilityInPdf { VisibilityInPdf_EnumValue }?,
  attribute Name { xsd:string }?,
  attribute Description { xsd:string }?,
  attribute AllowOverrides { xsd:boolean }?,
  attribute FillColor { xsd:string }?,
  attribute FillTint { xsd:double }?,
  attribute OverprintFill { xsd:boolean }?,
  attribute CornerRadius { xsd:double }?,
  attribute StrokeWeight { xsd:double }?,
  attribute MiterLimit { xsd:double {minInclusive="1" maxInclusive="500"} }?,
  attribute EndCap { EndCap_EnumValue }?,
  attribute EndJoin { EndJoin_EnumValue }?,
  attribute StrokeType { xsd:string }?,
  attribute StrokeCornerAdjustment { StrokeCornerAdjustment_EnumValue }?,
  attribute StrokeDashAndGap { list { xsd:double * } }?,
  attribute LeftLineEnd { ArrowHead_EnumValue }?,
  attribute RightLineEnd { ArrowHead_EnumValue }?,
  attribute StrokeColor { xsd:string }?,
  attribute StrokeTint { xsd:double }?,
  attribute GradientFillStart { UnitPointType_TypeDef }?,
  attribute GradientFillLength { xsd:double }?,
  attribute GradientFillAngle { xsd:double }?,
  attribute GradientStrokeStart { UnitPointType_TypeDef }?,
  attribute GradientStrokeLength { xsd:double }?,
  attribute GradientStrokeAngle { xsd:double }?,
  attribute OverprintStroke { xsd:boolean }?,
  attribute GapColor { xsd:string }?,
  attribute GapTint { xsd:double }?,
  attribute OverprintGap { xsd:boolean }?,
  attribute StrokeAlignment { StrokeAlignment_EnumValue }?,
  attribute Nonprinting { xsd:boolean }?,
  attribute ItemLayer { xsd:string }?,
  attribute Locked { xsd:boolean }?,
  attribute LocalDisplaySetting { DisplaySettingOptions_EnumValue }?,
  attribute GradientFillHiliteLength { xsd:double }?,
  attribute GradientFillHiliteAngle { xsd:double }?,
  attribute GradientStrokeHiliteLength { xsd:double }?,
  attribute GradientStrokeHiliteAngle { xsd:double }?,
  attribute AppliedObjectStyle { xsd:string }?,
  attribute CornerOption { CornerOptions_EnumValue }?,
  attribute Visible { xsd:boolean }?,
  attribute TopLeftCornerOption { CornerOptions_EnumValue }?,
  attribute TopRightCornerOption { CornerOptions_EnumValue }?,
  attribute BottomLeftCornerOption { CornerOptions_EnumValue }?,
  attribute BottomRightCornerOption { CornerOptions_EnumValue }?,
  attribute TopLeftCornerRadius { xsd:double }?,
  attribute TopRightCornerRadius { xsd:double }?,
  attribute BottomLeftCornerRadius { xsd:double }?,
  attribute BottomRightCornerRadius { xsd:double }?,
  attribute ItemTransform { TransformationMatrixType_TypeDef }?,
  element Properties {
    element PathBoundingBox { RectangleBoundsType_TypeDef }?&
    element PathGeometry { element GeometryPathType { GeometryPathType_TypeDef }* 
    }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  (TransparencySetting_Object?&
  AnchoredObjectSetting_Object?&
  TextWrapPreference_Object?&
  AnimationSetting_Object?),
  TimingSetting_Object?,
  (State_Object*&
  Behavior_Object*&
  GotoFirstPageBehavior_Object*&
  GotoLastPageBehavior_Object*&
  GotoNextPageBehavior_Object*&
  GotoPreviousPageBehavior_Object*&
  GotoNextViewBehavior_Object*&
  GotoPreviousViewBehavior_Object*&
  GotoURLBehavior_Object*&
  GotoAnchorBehavior_Object*&
  MovieBehavior_Object*&
  SoundBehavior_Object*&
  ShowHideFieldsBehavior_Object*&
  OpenFileBehavior_Object*&
  ViewZoomBehavior_Object*&
  AnimationBehavior_Object*&
  GotoNextStateBehavior_Object*&
  GotoPreviousStateBehavior_Object*&
  GotoStateBehavior_Object*&
  GotoPageBehavior_Object*)
)
}

State_Object = element State {
  attribute Self { xsd:string },
  attribute Active { xsd:boolean }?,
  attribute Enabled { xsd:boolean }?,
  element Properties {
    element Statetype { 
      (enum_type, StateTypes_EnumValue ) |
      (long_type, xsd:int )
    }?
  }
  ?
  ,
(
  Oval_Object*&
  Rectangle_Object*&
  GraphicLine_Object*&
  TextFrame_Object*&
  Polygon_Object*&
  Graphic_Object*&
  Image_Object*&
  EPS_Object*&
  WMF_Object*&
  PICT_Object*&
  PDF_Object*&
  Group_Object*&
  EPSText_Object*
)
}

AnimationBehavior_Object = element AnimationBehavior {
  attribute Self { xsd:string },
  attribute AnimatedPageItem { xsd:string }?,
  attribute Operation { AnimationPlayOperations_EnumValue }?,
  attribute AutoReverseOnRollOff { xsd:boolean }?,
  attribute Name { xsd:string }?,
  attribute EnableBehavior { xsd:boolean }?,
  attribute BehaviorEvent { BehaviorEvents_EnumValue }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

GotoNextStateBehavior_Object = element GotoNextStateBehavior {
  attribute Self { xsd:string },
  attribute AssociatedMultiStateObject { xsd:string }?,
  attribute LoopsToNextOrPrevious { xsd:boolean }?,
  attribute Name { xsd:string }?,
  attribute EnableBehavior { xsd:boolean }?,
  attribute BehaviorEvent { BehaviorEvents_EnumValue }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

GotoPreviousStateBehavior_Object = element GotoPreviousStateBehavior {
  attribute Self { xsd:string },
  attribute AssociatedMultiStateObject { xsd:string }?,
  attribute LoopsToNextOrPrevious { xsd:boolean }?,
  attribute Name { xsd:string }?,
  attribute EnableBehavior { xsd:boolean }?,
  attribute BehaviorEvent { BehaviorEvents_EnumValue }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

GotoStateBehavior_Object = element GotoStateBehavior {
  attribute Self { xsd:string },
  attribute AssociatedMultiStateObject { xsd:string }?,
  attribute GoBackOnRollOff { xsd:boolean }?,
  attribute Name { xsd:string }?,
  attribute EnableBehavior { xsd:boolean }?,
  attribute BehaviorEvent { BehaviorEvents_EnumValue }?,
  element Properties {
    element Statetype { 
      (enum_type, StateTypes_EnumValue ) |
      (long_type, xsd:int )
    }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

MultiStateObject_Object = element MultiStateObject {
  attribute Self { xsd:string },
  attribute InitiallyHidden { xsd:boolean }?,
  attribute Name { xsd:string }?,
  attribute Description { xsd:string }?,
  attribute AllowOverrides { xsd:boolean }?,
  attribute FillColor { xsd:string }?,
  attribute FillTint { xsd:double }?,
  attribute OverprintFill { xsd:boolean }?,
  attribute CornerRadius { xsd:double }?,
  attribute StrokeWeight { xsd:double }?,
  attribute MiterLimit { xsd:double {minInclusive="1" maxInclusive="500"} }?,
  attribute EndCap { EndCap_EnumValue }?,
  attribute EndJoin { EndJoin_EnumValue }?,
  attribute StrokeType { xsd:string }?,
  attribute StrokeCornerAdjustment { StrokeCornerAdjustment_EnumValue }?,
  attribute StrokeDashAndGap { list { xsd:double * } }?,
  attribute LeftLineEnd { ArrowHead_EnumValue }?,
  attribute RightLineEnd { ArrowHead_EnumValue }?,
  attribute StrokeColor { xsd:string }?,
  attribute StrokeTint { xsd:double }?,
  attribute GradientFillStart { UnitPointType_TypeDef }?,
  attribute GradientFillLength { xsd:double }?,
  attribute GradientFillAngle { xsd:double }?,
  attribute GradientStrokeStart { UnitPointType_TypeDef }?,
  attribute GradientStrokeLength { xsd:double }?,
  attribute GradientStrokeAngle { xsd:double }?,
  attribute OverprintStroke { xsd:boolean }?,
  attribute GapColor { xsd:string }?,
  attribute GapTint { xsd:double }?,
  attribute OverprintGap { xsd:boolean }?,
  attribute StrokeAlignment { StrokeAlignment_EnumValue }?,
  attribute Nonprinting { xsd:boolean }?,
  attribute ItemLayer { xsd:string }?,
  attribute Locked { xsd:boolean }?,
  attribute LocalDisplaySetting { DisplaySettingOptions_EnumValue }?,
  attribute GradientFillHiliteLength { xsd:double }?,
  attribute GradientFillHiliteAngle { xsd:double }?,
  attribute GradientStrokeHiliteLength { xsd:double }?,
  attribute GradientStrokeHiliteAngle { xsd:double }?,
  attribute AppliedObjectStyle { xsd:string }?,
  attribute CornerOption { CornerOptions_EnumValue }?,
  attribute Visible { xsd:boolean }?,
  attribute TopLeftCornerOption { CornerOptions_EnumValue }?,
  attribute TopRightCornerOption { CornerOptions_EnumValue }?,
  attribute BottomLeftCornerOption { CornerOptions_EnumValue }?,
  attribute BottomRightCornerOption { CornerOptions_EnumValue }?,
  attribute TopLeftCornerRadius { xsd:double }?,
  attribute TopRightCornerRadius { xsd:double }?,
  attribute BottomLeftCornerRadius { xsd:double }?,
  attribute BottomRightCornerRadius { xsd:double }?,
  attribute ItemTransform { TransformationMatrixType_TypeDef }?,
  element Properties {
    element PathBoundingBox { RectangleBoundsType_TypeDef }?&
    element PathGeometry { element GeometryPathType { GeometryPathType_TypeDef }* 
    }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  TransparencySetting_Object?&
  AnchoredObjectSetting_Object?&
  TextWrapPreference_Object?&
  State_Object*&
  AnimationSetting_Object?&
  TimingSetting_Object?
)
}

TimingSetting_Object = element TimingSetting {
(
  TimingList_Object*
)
}

TimingList_Object = element TimingList {
  attribute Self { xsd:string },
  attribute TriggerEvent { DynamicTriggerEvents_EnumValue }?,
(
  TimingGroup_Object*
)
}

TimingGroup_Object = element TimingGroup {
  attribute Self { xsd:string },
  attribute Plays { xsd:int {minInclusive="1" maxInclusive="100"} }?,
  attribute PlaysLoop { xsd:boolean }?,
(
  TimingTarget_Object*
)
}

TimingTarget_Object = element TimingTarget {
  attribute Self { xsd:string },
  attribute DynamicTarget { xsd:string }?,
  attribute DelaySeconds { xsd:double {minInclusive="0" maxInclusive="60"} }?,
  attribute ReverseAnimation { xsd:boolean }?,
  attribute TargetRole { xsd:int }?,
  attribute TargetAction { xsd:int }?,
  attribute Placement { xsd:int }?
}


}