# Adobe InDesign CS5 7.0.3.535

datatypes xsd = "http://www.w3.org/2001/XMLSchema-datatypes"
namespace idPkg="http://ns.adobe.com/AdobeInDesign/idml/1.0/packaging"

grammar {
start = Preferences_File

include "../datatype.rnc"

Preferences_File = element idPkg:Preferences {
  attribute DOMVersion { "7.0" },
(
  DataMerge_Object?&
  DataMergeOption_Object?&
  LayoutAdjustmentPreference_Object?&
  XMLPreference_Object?&
  XMLImportPreference_Object?&
  XMLExportPreference_Object?&
  ExportForWebPreference_Object?&
  TransparencyPreference_Object?&
  TransparencyDefaultContainerObject_Object?&
  TextFramePreference_Object?&
  TextPreference_Object?&
  TextDefault_Object?&
  DictionaryPreference_Object?&
  StoryPreference_Object?&
  AnchoredObjectDefault_Object?&
  AnchoredObjectSetting_Object?&
  BaselineFrameGridOption_Object?&
  FootnoteOption_Object?&
  TextWrapPreference_Object?&
  DocumentPreference_Object?&
  GridPreference_Object?&
  GuidePreference_Object?&
  MarginPreference_Object?&
  PasteboardPreference_Object?&
  ViewPreference_Object?&
  PrintPreference_Object?&
  PrintBookletOption_Object?&
  PrintBookletPrintPreference_Object?&
  IndexOptions_Object?&
  IndexHeaderSetting_Object?&
  PageItemDefault_Object?&
  FrameFittingOption_Object?&
  ButtonPreference_Object?&
  TinDocumentDataObject_Object?&
  LayoutGridDataInformation_Object?&
  StoryGridDataInformation_Object?&
  CjkGridPreference_Object?&
  MojikumiUiPreference_Object?&
  ChapterNumberPreference_Object?
)
}

DataMerge_Object = element DataMerge {
  attribute DataSourceFileType { DataSourceType_EnumValue }?,
  attribute DataSourceFile { xsd:string }?,
(
  DataMergeField_Object*
)
}

DataMergeField_Object = element DataMergeField {
  attribute Self { xsd:string },
  attribute FieldName { xsd:string }?
}

DataMergeOption_Object = element DataMergeOption {
  attribute FittingOption { Fitting_EnumValue }?,
  attribute CenterImage { xsd:boolean }?,
  attribute LinkImages { xsd:boolean }?,
  attribute RemoveBlankLines { xsd:boolean }?,
  attribute CreateNewDocument { xsd:boolean }?,
  attribute DocumentSize { xsd:int }?
}

LayoutAdjustmentPreference_Object = element LayoutAdjustmentPreference {
  attribute EnableLayoutAdjustment { xsd:boolean }?,
  attribute SnapZone { xsd:double {minInclusive="0" maxInclusive="12"} }?,
  attribute AllowGraphicsToResize { xsd:boolean }?,
  attribute AllowRulerGuidesToMove { xsd:boolean }?,
  attribute IgnoreRulerGuideAlignments { xsd:boolean }?,
  attribute IgnoreObjectOrLayerLocks { xsd:boolean }?
}

XMLPreference_Object = element XMLPreference {
  attribute DefaultStoryTagName { xsd:string }?,
  attribute DefaultTableTagName { xsd:string }?,
  attribute DefaultCellTagName { xsd:string }?,
  attribute DefaultImageTagName { xsd:string }?,
  element Properties {
    element DefaultStoryTagColor { InDesignUIColorType_TypeDef }?&
    element DefaultTableTagColor { InDesignUIColorType_TypeDef }?&
    element DefaultCellTagColor { InDesignUIColorType_TypeDef }?&
    element DefaultImageTagColor { InDesignUIColorType_TypeDef }?
  }
  ?
}

XMLImportPreference_Object = element XMLImportPreference {
  attribute CreateLinkToXML { xsd:boolean }?,
  attribute RepeatTextElements { xsd:boolean }?,
  attribute IgnoreUnmatchedIncoming { xsd:boolean }?,
  attribute ImportTextIntoTables { xsd:boolean }?,
  attribute IgnoreWhitespace { xsd:boolean }?,
  attribute RemoveUnmatchedExisting { xsd:boolean }?,
  attribute ImportToSelected { xsd:boolean }?,
  attribute ImportStyle { XMLImportStyles_EnumValue }?,
  attribute AllowTransform { xsd:boolean }?,
  attribute ImportCALSTables { xsd:boolean }?,
  element Properties {
    element TransformFilename { 
      (file_type, xsd:string ) |
      (enum_type, XMLTransformFile_EnumValue )
    }?&
    element TransformParameters { element NameValuePair { NameValuePair_TypeDef }* 
    }?
  }
  ?
}

XMLExportPreference_Object = element XMLExportPreference {
  attribute ViewAfterExport { xsd:boolean }?,
  attribute ExportFromSelected { xsd:boolean }?,
  attribute FileEncoding { XMLFileEncoding_EnumValue }?,
  attribute Ruby { xsd:boolean }?,
  attribute ExcludeDtd { xsd:boolean }?,
  attribute CopyOriginalImages { xsd:boolean }?,
  attribute CopyOptimizedImages { xsd:boolean }?,
  attribute CopyFormattedImages { xsd:boolean }?,
  attribute ImageConversion { ImageConversion_EnumValue }?,
  attribute GIFOptionsPalette { GIFOptionsPalette_EnumValue }?,
  attribute GIFOptionsInterlaced { xsd:boolean }?,
  attribute JPEGOptionsQuality { JPEGOptionsQuality_EnumValue }?,
  attribute JPEGOptionsFormat { JPEGOptionsFormat_EnumValue }?,
  attribute AllowTransform { xsd:boolean }?,
  attribute CharacterReferences { xsd:boolean }?,
  attribute ExportUntaggedTablesFormat { XMLExportUntaggedTablesFormat_EnumValue }?,
  element Properties {
    element PreferredBrowser { 
      (file_type, xsd:string ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element TransformFilename { 
      (file_type, xsd:string ) |
      (enum_type, XMLTransformFile_EnumValue )
    }?
  }
  ?
}

ExportForWebPreference_Object = element ExportForWebPreference {
  attribute CopyFormattedImages { xsd:boolean }?,
  attribute CopyOptimizedImages { xsd:boolean }?,
  attribute CopyOriginalImages { xsd:boolean }?,
  attribute ImageConversion { ImageConversion_EnumValue }?,
  attribute GIFOptionsPalette { GIFOptionsPalette_EnumValue }?,
  attribute GIFOptionsInterlaced { xsd:boolean }?,
  attribute JPEGOptionsQuality { JPEGOptionsQuality_EnumValue }?,
  attribute JPEGOptionsFormat { JPEGOptionsFormat_EnumValue }?
}

TransparencyPreference_Object = element TransparencyPreference {
  attribute BlendingSpace { BlendingSpace_EnumValue }?,
  attribute GlobalLightAngle { xsd:double {minInclusive="-180" maxInclusive="180"} }?,
  attribute GlobalLightAltitude { xsd:double {minInclusive="0" maxInclusive="100"} }?
}

TransparencyDefaultContainerObject_Object = element TransparencyDefaultContainerObject {
(
  TransparencySetting_Object?&
  StrokeTransparencySetting_Object?&
  FillTransparencySetting_Object?&
  ContentTransparencySetting_Object?
)
}

TransparencySetting_Object = element TransparencySetting {
(
  BlendingSetting_Object?&
  DropShadowSetting_Object?&
  FeatherSetting_Object?&
  InnerShadowSetting_Object?&
  OuterGlowSetting_Object?&
  InnerGlowSetting_Object?&
  BevelAndEmbossSetting_Object?&
  SatinSetting_Object?&
  DirectionalFeatherSetting_Object?&
  GradientFeatherSetting_Object?
)
}

BlendingSetting_Object = element BlendingSetting {
  attribute BlendMode { BlendMode_EnumValue }?,
  attribute Opacity { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute KnockoutGroup { xsd:boolean }?,
  attribute IsolateBlending { xsd:boolean }?
}

DropShadowSetting_Object = element DropShadowSetting {
  attribute Distance { xsd:double {minInclusive="0" maxInclusive="1000"} }?,
  attribute Angle { xsd:double {minInclusive="-180" maxInclusive="180"} }?,
  attribute Mode { ShadowMode_EnumValue }?,
  attribute BlendMode { BlendMode_EnumValue }?,
  attribute Opacity { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute XOffset { xsd:double {minInclusive="-1000" maxInclusive="1000"} }?,
  attribute YOffset { xsd:double {minInclusive="-1000" maxInclusive="1000"} }?,
  attribute Size { xsd:double {minInclusive="0" maxInclusive="144"} }?,
  attribute EffectColor { xsd:string }?,
  attribute Noise { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute Spread { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute UseGlobalLight { xsd:boolean }?,
  attribute KnockedOut { xsd:boolean }?,
  attribute HonorOtherEffects { xsd:boolean }?
}

FeatherSetting_Object = element FeatherSetting {
  attribute Mode { FeatherMode_EnumValue }?,
  attribute Width { xsd:double {minInclusive="0" maxInclusive="1000"} }?,
  attribute CornerType { FeatherCornerType_EnumValue }?,
  attribute Noise { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute ChokeAmount { xsd:double {minInclusive="0" maxInclusive="100"} }?
}

InnerShadowSetting_Object = element InnerShadowSetting {
  attribute XOffset { xsd:double {minInclusive="-1000" maxInclusive="1000"} }?,
  attribute YOffset { xsd:double {minInclusive="-1000" maxInclusive="1000"} }?,
  attribute Applied { xsd:boolean }?,
  attribute EffectColor { xsd:string }?,
  attribute BlendMode { BlendMode_EnumValue }?,
  attribute Opacity { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute Angle { xsd:double {minInclusive="-180" maxInclusive="180"} }?,
  attribute Distance { xsd:double {minInclusive="0" maxInclusive="1000"} }?,
  attribute UseGlobalLight { xsd:boolean }?,
  attribute ChokeAmount { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute Size { xsd:double {minInclusive="0" maxInclusive="144"} }?,
  attribute Noise { xsd:double {minInclusive="0" maxInclusive="100"} }?
}

OuterGlowSetting_Object = element OuterGlowSetting {
  attribute Applied { xsd:boolean }?,
  attribute BlendMode { BlendMode_EnumValue }?,
  attribute Opacity { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute Noise { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute EffectColor { xsd:string }?,
  attribute Technique { GlowTechnique_EnumValue }?,
  attribute Spread { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute Size { xsd:double {minInclusive="0" maxInclusive="144"} }?
}

InnerGlowSetting_Object = element InnerGlowSetting {
  attribute Applied { xsd:boolean }?,
  attribute BlendMode { BlendMode_EnumValue }?,
  attribute Opacity { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute Noise { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute EffectColor { xsd:string }?,
  attribute Technique { GlowTechnique_EnumValue }?,
  attribute Spread { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute Size { xsd:double {minInclusive="0" maxInclusive="144"} }?,
  attribute Source { InnerGlowSource_EnumValue }?
}

BevelAndEmbossSetting_Object = element BevelAndEmbossSetting {
  attribute Applied { xsd:boolean }?,
  attribute Style { BevelAndEmbossStyle_EnumValue }?,
  attribute Technique { BevelAndEmbossTechnique_EnumValue }?,
  attribute Depth { xsd:double {minInclusive="0" maxInclusive="1000"} }?,
  attribute Direction { BevelAndEmbossDirection_EnumValue }?,
  attribute Size { xsd:double {minInclusive="0" maxInclusive="144"} }?,
  attribute Soften { xsd:double {minInclusive="0" maxInclusive="144"} }?,
  attribute Angle { xsd:double {minInclusive="-180" maxInclusive="180"} }?,
  attribute Altitude { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute UseGlobalLight { xsd:boolean }?,
  attribute HighlightColor { xsd:string }?,
  attribute HighlightBlendMode { BlendMode_EnumValue }?,
  attribute HighlightOpacity { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute ShadowColor { xsd:string }?,
  attribute ShadowBlendMode { BlendMode_EnumValue }?,
  attribute ShadowOpacity { xsd:double {minInclusive="0" maxInclusive="100"} }?
}

SatinSetting_Object = element SatinSetting {
  attribute Applied { xsd:boolean }?,
  attribute EffectColor { xsd:string }?,
  attribute BlendMode { BlendMode_EnumValue }?,
  attribute Opacity { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute Angle { xsd:double {minInclusive="-180" maxInclusive="180"} }?,
  attribute Distance { xsd:double {minInclusive="0" maxInclusive="1000"} }?,
  attribute Size { xsd:double {minInclusive="0" maxInclusive="144"} }?,
  attribute InvertEffect { xsd:boolean }?
}

DirectionalFeatherSetting_Object = element DirectionalFeatherSetting {
  attribute Applied { xsd:boolean }?,
  attribute LeftWidth { xsd:double {minInclusive="0" maxInclusive="1000"} }?,
  attribute RightWidth { xsd:double {minInclusive="0" maxInclusive="1000"} }?,
  attribute TopWidth { xsd:double {minInclusive="0" maxInclusive="1000"} }?,
  attribute BottomWidth { xsd:double {minInclusive="0" maxInclusive="1000"} }?,
  attribute ChokeAmount { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute Angle { xsd:double {minInclusive="-180" maxInclusive="180"} }?,
  attribute FollowShapeMode { FollowShapeModeOptions_EnumValue }?,
  attribute Noise { xsd:double {minInclusive="0" maxInclusive="100"} }?
}

GradientFeatherSetting_Object = element GradientFeatherSetting {
  attribute Applied { xsd:boolean }?,
  attribute Type { GradientType_EnumValue }?,
  attribute Angle { xsd:double {minInclusive="-180" maxInclusive="180"} }?,
  attribute Length { xsd:double }?,
  attribute GradientStart { UnitPointType_TypeDef }?,
  attribute HiliteAngle { xsd:double }?,
  attribute HiliteLength { xsd:double }?,
(
  OpacityGradientStop_Object*
)
}

OpacityGradientStop_Object = element OpacityGradientStop {
  attribute Self { xsd:string },
  attribute Opacity { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute Location { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute Midpoint { xsd:double {minInclusive="13" maxInclusive="87"} }?
}

StrokeTransparencySetting_Object = element StrokeTransparencySetting {
(
  BlendingSetting_Object?&
  DropShadowSetting_Object?&
  FeatherSetting_Object?&
  InnerShadowSetting_Object?&
  OuterGlowSetting_Object?&
  InnerGlowSetting_Object?&
  BevelAndEmbossSetting_Object?&
  SatinSetting_Object?&
  DirectionalFeatherSetting_Object?&
  GradientFeatherSetting_Object?
)
}

FillTransparencySetting_Object = element FillTransparencySetting {
(
  BlendingSetting_Object?&
  DropShadowSetting_Object?&
  FeatherSetting_Object?&
  InnerShadowSetting_Object?&
  OuterGlowSetting_Object?&
  InnerGlowSetting_Object?&
  BevelAndEmbossSetting_Object?&
  SatinSetting_Object?&
  DirectionalFeatherSetting_Object?&
  GradientFeatherSetting_Object?
)
}

ContentTransparencySetting_Object = element ContentTransparencySetting {
(
  BlendingSetting_Object?&
  DropShadowSetting_Object?&
  FeatherSetting_Object?&
  InnerShadowSetting_Object?&
  OuterGlowSetting_Object?&
  InnerGlowSetting_Object?&
  BevelAndEmbossSetting_Object?&
  SatinSetting_Object?&
  DirectionalFeatherSetting_Object?&
  GradientFeatherSetting_Object?
)
}

TextFramePreference_Object = element TextFramePreference {
  attribute TextColumnCount { xsd:int {minInclusive="1" maxInclusive="40"} }?,
  attribute TextColumnGutter { xsd:double {minInclusive="0" maxInclusive="8640"} }?,
  attribute TextColumnFixedWidth { xsd:double {minInclusive="0" maxInclusive="8640"} }?,
  attribute UseFixedColumnWidth { xsd:boolean }?,
  attribute FirstBaselineOffset { FirstBaseline_EnumValue }?,
  attribute MinimumFirstBaselineOffset { xsd:double {minInclusive="0" maxInclusive="8640"} }?,
  attribute VerticalJustification { VerticalJustification_EnumValue }?,
  attribute VerticalThreshold { xsd:double {minInclusive="0" maxInclusive="8640"} }?,
  attribute IgnoreWrap { xsd:boolean }?,
  attribute VerticalBalanceColumns { xsd:boolean }?,
  element Properties {
    element InsetSpacing { 
      (unit_type, xsd:double {minInclusive="0" maxInclusive="8640"} ) |
      (list_type, 
      element ListItem { unit_type, xsd:double {minInclusive="0" maxInclusive="8640"} },
      element ListItem { unit_type, xsd:double {minInclusive="0" maxInclusive="8640"} },
      element ListItem { unit_type, xsd:double {minInclusive="0" maxInclusive="8640"} },
      element ListItem { unit_type, xsd:double {minInclusive="0" maxInclusive="8640"} })
    }?
  }
  ?
}

TextPreference_Object = element TextPreference {
  attribute TypographersQuotes { xsd:boolean }?,
  attribute HighlightHjViolations { xsd:boolean }?,
  attribute HighlightKeeps { xsd:boolean }?,
  attribute HighlightSubstitutedGlyphs { xsd:boolean }?,
  attribute HighlightCustomSpacing { xsd:boolean }?,
  attribute HighlightSubstitutedFonts { xsd:boolean }?,
  attribute UseOpticalSize { xsd:boolean }?,
  attribute UseParagraphLeading { xsd:boolean }?,
  attribute SuperscriptSize { xsd:double {minInclusive="1" maxInclusive="200"} }?,
  attribute SuperscriptPosition { xsd:double {minInclusive="-500" maxInclusive="500"} }?,
  attribute SubscriptSize { xsd:double {minInclusive="1" maxInclusive="200"} }?,
  attribute SubscriptPosition { xsd:double {minInclusive="-500" maxInclusive="500"} }?,
  attribute SmallCap { xsd:double {minInclusive="1" maxInclusive="200"} }?,
  attribute LeadingKeyIncrement { xsd:double {minInclusive="0.001" maxInclusive="200"} }?,
  attribute BaselineShiftKeyIncrement { xsd:double {minInclusive="0.001" maxInclusive="200"} }?,
  attribute KerningKeyIncrement { xsd:double {minInclusive="1" maxInclusive="100"} }?,
  attribute ShowInvisibles { xsd:boolean }?,
  attribute JustifyTextWraps { xsd:boolean }?,
  attribute AbutTextToTextWrap { xsd:boolean }?,
  attribute ZOrderTextWrap { xsd:boolean }?,
  attribute LinkTextFilesWhenImporting { xsd:boolean }?,
  attribute HighlightKinsoku { xsd:boolean }?,
  attribute UseNewVerticalScaling { xsd:boolean }?,
  attribute UseCidMojikumi { xsd:boolean }?,
  attribute EnableStylePreviewMode { xsd:boolean }?,
  attribute SmartTextReflow { xsd:boolean }?,
  attribute AddPages { AddPageOptions_EnumValue }?,
  attribute LimitToMasterTextFrames { xsd:boolean }?,
  attribute PreserveFacingPageSpreads { xsd:boolean }?,
  attribute DeleteEmptyPages { xsd:boolean }?
}

TextDefault_Object = element TextDefault {
  attribute FontStyle { xsd:string }?,
  attribute PointSize { xsd:double }?,
  attribute KerningMethod { xsd:string }?,
  attribute Tracking { xsd:double }?,
  attribute Capitalization { Capitalization_EnumValue }?,
  attribute Position { Position_EnumValue }?,
  attribute Underline { xsd:boolean }?,
  attribute StrikeThru { xsd:boolean }?,
  attribute Ligatures { xsd:boolean }?,
  attribute NoBreak { xsd:boolean }?,
  attribute HorizontalScale { xsd:double }?,
  attribute VerticalScale { xsd:double }?,
  attribute BaselineShift { xsd:double }?,
  attribute Skew { xsd:double }?,
  attribute FillTint { xsd:double }?,
  attribute StrokeTint { xsd:double }?,
  attribute StrokeWeight { xsd:double }?,
  attribute OverprintStroke { xsd:boolean }?,
  attribute OverprintFill { xsd:boolean }?,
  attribute OTFFigureStyle { OTFFigureStyle_EnumValue }?,
  attribute OTFOrdinal { xsd:boolean }?,
  attribute OTFFraction { xsd:boolean }?,
  attribute OTFDiscretionaryLigature { xsd:boolean }?,
  attribute OTFTitling { xsd:boolean }?,
  attribute OTFContextualAlternate { xsd:boolean }?,
  attribute OTFSwash { xsd:boolean }?,
  attribute UnderlineTint { xsd:double }?,
  attribute UnderlineGapTint { xsd:double }?,
  attribute UnderlineOverprint { xsd:boolean }?,
  attribute UnderlineGapOverprint { xsd:boolean }?,
  attribute UnderlineOffset { xsd:double }?,
  attribute UnderlineWeight { xsd:double }?,
  attribute StrikeThroughTint { xsd:double }?,
  attribute StrikeThroughGapTint { xsd:double }?,
  attribute StrikeThroughOverprint { xsd:boolean }?,
  attribute StrikeThroughGapOverprint { xsd:boolean }?,
  attribute StrikeThroughOffset { xsd:double }?,
  attribute StrikeThroughWeight { xsd:double }?,
  attribute FillColor { xsd:string }?,
  attribute StrokeColor { xsd:string }?,
  attribute AppliedLanguage { xsd:string }?,
  attribute FirstLineIndent { xsd:double }?,
  attribute LeftIndent { xsd:double }?,
  attribute RightIndent { xsd:double }?,
  attribute SpaceBefore { xsd:double }?,
  attribute SpaceAfter { xsd:double }?,
  attribute Justification { Justification_EnumValue }?,
  attribute SingleWordJustification { SingleWordJustification_EnumValue }?,
  attribute AutoLeading { xsd:double }?,
  attribute DropCapLines { xsd:short {minInclusive="0" maxInclusive="25"} }?,
  attribute DropCapCharacters { xsd:short {minInclusive="0" maxInclusive="150"} }?,
  attribute KeepLinesTogether { xsd:boolean }?,
  attribute KeepAllLinesTogether { xsd:boolean }?,
  attribute KeepWithNext { xsd:short {minInclusive="0" maxInclusive="5"} }?,
  attribute KeepFirstLines { xsd:short {minInclusive="1" maxInclusive="50"} }?,
  attribute KeepLastLines { xsd:short {minInclusive="1" maxInclusive="50"} }?,
  attribute StartParagraph { StartParagraph_EnumValue }?,
  attribute Composer { xsd:string }?,
  attribute MinimumWordSpacing { xsd:double }?,
  attribute MaximumWordSpacing { xsd:double }?,
  attribute DesiredWordSpacing { xsd:double }?,
  attribute MinimumLetterSpacing { xsd:double }?,
  attribute MaximumLetterSpacing { xsd:double }?,
  attribute DesiredLetterSpacing { xsd:double }?,
  attribute MinimumGlyphScaling { xsd:double }?,
  attribute MaximumGlyphScaling { xsd:double }?,
  attribute DesiredGlyphScaling { xsd:double }?,
  attribute RuleAbove { xsd:boolean }?,
  attribute RuleAboveOverprint { xsd:boolean }?,
  attribute RuleAboveLineWeight { xsd:double }?,
  attribute RuleAboveTint { xsd:double }?,
  attribute RuleAboveOffset { xsd:double }?,
  attribute RuleAboveLeftIndent { xsd:double }?,
  attribute RuleAboveRightIndent { xsd:double }?,
  attribute RuleAboveWidth { RuleWidth_EnumValue }?,
  attribute RuleAboveGapTint { xsd:double }?,
  attribute RuleAboveGapOverprint { xsd:boolean }?,
  attribute RuleBelow { xsd:boolean }?,
  attribute RuleBelowLineWeight { xsd:double }?,
  attribute RuleBelowTint { xsd:double }?,
  attribute RuleBelowOffset { xsd:double }?,
  attribute RuleBelowLeftIndent { xsd:double }?,
  attribute RuleBelowRightIndent { xsd:double }?,
  attribute RuleBelowWidth { RuleWidth_EnumValue }?,
  attribute RuleBelowGapTint { xsd:double }?,
  attribute HyphenateCapitalizedWords { xsd:boolean }?,
  attribute Hyphenation { xsd:boolean }?,
  attribute HyphenateBeforeLast { xsd:short {minInclusive="1" maxInclusive="15"} }?,
  attribute HyphenateAfterFirst { xsd:short {minInclusive="1" maxInclusive="15"} }?,
  attribute HyphenateWordsLongerThan { xsd:short {minInclusive="3" maxInclusive="25"} }?,
  attribute HyphenateLadderLimit { xsd:short {minInclusive="0" maxInclusive="25"} }?,
  attribute HyphenationZone { xsd:double }?,
  attribute HyphenWeight { xsd:short {minInclusive="0" maxInclusive="10"} }?,
  attribute AppliedParagraphStyle { xsd:string }?,
  attribute AppliedCharacterStyle { xsd:string }?,
  attribute LastLineIndent { xsd:double }?,
  attribute HyphenateLastWord { xsd:boolean }?,
  attribute OTFSlashedZero { xsd:boolean }?,
  attribute OTFHistorical { xsd:boolean }?,
  attribute OTFStylisticSets { xsd:int }?,
  attribute GradientFillLength { xsd:double }?,
  attribute GradientFillAngle { xsd:double }?,
  attribute GradientStrokeLength { xsd:double }?,
  attribute GradientStrokeAngle { xsd:double }?,
  attribute GradientFillStart { UnitPointType_TypeDef }?,
  attribute GradientStrokeStart { UnitPointType_TypeDef }?,
  attribute KeepWithPrevious { xsd:boolean }?,
  attribute SpanColumnType { SpanColumnTypeOptions_EnumValue }?,
  attribute SplitColumnInsideGutter { xsd:double }?,
  attribute SplitColumnOutsideGutter { xsd:double }?,
  attribute SpanColumnMinSpaceBefore { xsd:double }?,
  attribute SpanColumnMinSpaceAfter { xsd:double }?,
  attribute RuleBelowOverprint { xsd:boolean }?,
  attribute RuleBelowGapOverprint { xsd:boolean }?,
  attribute DropcapDetail { xsd:int }?,
  attribute HyphenateAcrossColumns { xsd:boolean }?,
  attribute KeepRuleAboveInFrame { xsd:boolean }?,
  attribute IgnoreEdgeAlignment { xsd:boolean }?,
  attribute OTFMark { xsd:boolean }?,
  attribute OTFLocale { xsd:boolean }?,
  attribute PositionalForm { PositionalForms_EnumValue }?,
  attribute ParagraphDirection { ParagraphDirectionOptions_EnumValue }?,
  attribute ParagraphJustification { ParagraphJustificationOptions_EnumValue }?,
  attribute MiterLimit { xsd:double {minInclusive="0" maxInclusive="1000"} }?,
  attribute StrokeAlignment { TextStrokeAlign_EnumValue }?,
  attribute EndJoin { OutlineJoin_EnumValue }?,
  attribute OTFOverlapSwash { xsd:boolean }?,
  attribute OTFStylisticAlternate { xsd:boolean }?,
  attribute OTFJustificationAlternate { xsd:boolean }?,
  attribute OTFStretchedAlternate { xsd:boolean }?,
  attribute CharacterDirection { CharacterDirectionOptions_EnumValue }?,
  attribute KeyboardDirection { CharacterDirectionOptions_EnumValue }?,
  attribute DigitsType { DigitsTypeOptions_EnumValue }?,
  attribute Kashidas { KashidasOptions_EnumValue }?,
  attribute DiacriticPosition { DiacriticPositionOptions_EnumValue }?,
  attribute XOffsetDiacritic { xsd:double }?,
  attribute YOffsetDiacritic { xsd:double }?,
  attribute ParagraphBreakType { ParagraphBreakTypes_EnumValue }?,
  attribute PageNumberType { PageNumberTypes_EnumValue }?,
  attribute AppliedNamedGrid { xsd:string }?,
  attribute GridAlignFirstLineOnly { xsd:boolean }?,
  attribute GridAlignment { GridAlignment_EnumValue }?,
  attribute GridGyoudori { xsd:short }?,
  attribute AutoTcy { xsd:short }?,
  attribute AutoTcyIncludeRoman { xsd:boolean }?,
  attribute KinsokuType { KinsokuType_EnumValue }?,
  attribute KinsokuHangType { KinsokuHangTypes_EnumValue }?,
  attribute BunriKinshi { xsd:boolean }?,
  attribute Rensuuji { xsd:boolean }?,
  attribute RotateSingleByteCharacters { xsd:boolean }?,
  attribute LeadingModel { LeadingModel_EnumValue }?,
  attribute CharacterAlignment { CharacterAlignment_EnumValue }?,
  attribute Tsume { xsd:double }?,
  attribute LeadingAki { xsd:double }?,
  attribute TrailingAki { xsd:double }?,
  attribute CharacterRotation { xsd:double }?,
  attribute Jidori { xsd:short }?,
  attribute ShataiMagnification { xsd:double }?,
  attribute ShataiDegreeAngle { xsd:double }?,
  attribute ShataiAdjustRotation { xsd:boolean }?,
  attribute ShataiAdjustTsume { xsd:boolean }?,
  attribute Tatechuyoko { xsd:boolean }?,
  attribute TatechuyokoXOffset { xsd:double }?,
  attribute TatechuyokoYOffset { xsd:double }?,
  attribute KentenTint { xsd:double }?,
  attribute KentenStrokeTint { xsd:double }?,
  attribute KentenWeight { xsd:double }?,
  attribute KentenOverprintFill { AdornmentOverprint_EnumValue }?,
  attribute KentenOverprintStroke { AdornmentOverprint_EnumValue }?,
  attribute KentenKind { KentenCharacter_EnumValue }?,
  attribute KentenPlacement { xsd:double }?,
  attribute KentenAlignment { KentenAlignment_EnumValue }?,
  attribute KentenPosition { RubyKentenPosition_EnumValue }?,
  attribute KentenFontSize { xsd:double }?,
  attribute KentenXScale { xsd:double }?,
  attribute KentenYScale { xsd:double }?,
  attribute KentenCustomCharacter { xsd:string }?,
  attribute KentenCharacterSet { KentenCharacterSet_EnumValue }?,
  attribute RubyTint { xsd:double }?,
  attribute RubyWeight { xsd:double }?,
  attribute RubyOverprintFill { AdornmentOverprint_EnumValue }?,
  attribute RubyOverprintStroke { AdornmentOverprint_EnumValue }?,
  attribute RubyStrokeTint { xsd:double }?,
  attribute RubyFontSize { xsd:double }?,
  attribute RubyOpenTypePro { xsd:boolean }?,
  attribute RubyXScale { xsd:double }?,
  attribute RubyYScale { xsd:double }?,
  attribute RubyType { RubyTypes_EnumValue }?,
  attribute RubyAlignment { RubyAlignments_EnumValue }?,
  attribute RubyPosition { RubyKentenPosition_EnumValue }?,
  attribute RubyXOffset { xsd:double }?,
  attribute RubyYOffset { xsd:double }?,
  attribute RubyParentSpacing { RubyParentSpacing_EnumValue }?,
  attribute RubyAutoAlign { xsd:boolean }?,
  attribute RubyOverhang { xsd:boolean }?,
  attribute RubyAutoScaling { xsd:boolean }?,
  attribute RubyParentScalingPercent { xsd:double }?,
  attribute RubyParentOverhangAmount { RubyOverhang_EnumValue }?,
  attribute Warichu { xsd:boolean }?,
  attribute WarichuSize { xsd:double }?,
  attribute WarichuLines { xsd:short }?,
  attribute WarichuLineSpacing { xsd:double }?,
  attribute WarichuAlignment { WarichuAlignment_EnumValue }?,
  attribute WarichuCharsAfterBreak { xsd:short }?,
  attribute WarichuCharsBeforeBreak { xsd:short }?,
  attribute OTFProportionalMetrics { xsd:boolean }?,
  attribute OTFHVKana { xsd:boolean }?,
  attribute OTFRomanItalics { xsd:boolean }?,
  attribute ScaleAffectsLineHeight { xsd:boolean }?,
  attribute CjkGridTracking { xsd:boolean }?,
  attribute GlyphForm { AlternateGlyphForms_EnumValue }?,
  attribute ParagraphGyoudori { xsd:boolean }?,
  attribute RubyAutoTcyDigits { xsd:short }?,
  attribute RubyAutoTcyIncludeRoman { xsd:boolean }?,
  attribute RubyAutoTcyAutoScale { xsd:boolean }?,
  attribute TreatIdeographicSpaceAsSpace { xsd:boolean }?,
  attribute AllowArbitraryHyphenation { xsd:boolean }?,
  attribute BulletsAndNumberingListType { ListType_EnumValue }?,
  attribute NumberingExpression { xsd:string }?,
  attribute BulletsTextAfter { xsd:string }?,
  attribute NumberingLevel { xsd:int }?,
  attribute NumberingContinue { xsd:boolean }?,
  attribute NumberingStartAt { xsd:int }?,
  attribute NumberingApplyRestartPolicy { xsd:boolean }?,
  attribute BulletsAlignment { ListAlignment_EnumValue }?,
  attribute NumberingAlignment { ListAlignment_EnumValue }?,
  element Properties {
    element AppliedFont { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element Leading { 
      (unit_type, xsd:double ) |
      (enum_type, Leading_EnumValue )
    }?&
    element UnderlineColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element UnderlineGapColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element UnderlineType { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element StrikeThroughColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element StrikeThroughGapColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element StrikeThroughType { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element BalanceRaggedLines { 
      (bool_type, xsd:boolean ) |
      (enum_type, BalanceLinesStyle_EnumValue )
    }?&
    element RuleAboveColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RuleAboveGapColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RuleAboveType { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RuleBelowColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RuleBelowGapColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RuleBelowType { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element SpanSplitColumnCount { 
      (short_type, xsd:short {minInclusive="1" maxInclusive="40"} ) |
      (enum_type, SpanColumnCountOptions_EnumValue )
    }?&
    element AllLineStyles { list_type, element ListItem { 
        record_type, 
        (
          element AppliedCharacterStyle { object_type, xsd:string }&
          element LineCount { long_type, xsd:int }&
          element RepeatLast { long_type, xsd:int })
      }* 
    }?&
    element AllGREPStyles { list_type, element ListItem { 
        record_type, 
        (
          element AppliedCharacterStyle { object_type, xsd:string }&
          element GrepExpression { string_type, xsd:string })
      }* 
    }?&
    element AllNestedStyles { list_type, element ListItem { 
        record_type, 
        (
          element AppliedCharacterStyle { object_type, xsd:string }&
          element Delimiter { 
            (string_type, xsd:string ) |
            (enum_type, NestedStyleDelimiters_EnumValue )
          }&
          element Repetition { long_type, xsd:int }&
          element Inclusive { bool_type, xsd:boolean })
      }* 
    }?&
    element TabList { list_type, element ListItem { 
        record_type, 
        (
          element Alignment { enum_type, TabStopAlignment_EnumValue }&
          element AlignmentCharacter { string_type, xsd:string }&
          element Leader { string_type, xsd:string }&
          element Position { unit_type, xsd:double })
      }* 
    }?&
    element KinsokuSet { 
      (object_type, xsd:string ) |
      (enum_type, KinsokuSet_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element Mojikumi { 
      (object_type, xsd:string ) |
      (string_type, xsd:string ) |
      (enum_type, MojikumiTableDefaults_EnumValue )
    }?&
    element KentenFillColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element KentenStrokeColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element KentenFont { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element KentenFontStyle { 
      (string_type, xsd:string ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element RubyFill { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RubyStroke { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RubyFont { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RubyFontStyle { 
      (string_type, xsd:string ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element BulletChar { 
      attribute BulletCharacterType { BulletCharacterType_EnumValue },
      attribute BulletCharacterValue { xsd:int }
    }?&
    element BulletsFont { 
      (object_type, xsd:string ) |
      (string_type, xsd:string ) |
      (enum_type, AutoEnum_EnumValue )
    }?&
    element BulletsFontStyle { 
      (string_type, xsd:string ) |
      (enum_type, NothingEnum_EnumValue ) |
      (enum_type, AutoEnum_EnumValue )
    }?&
    element BulletsCharacterStyle { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element NumberingCharacterStyle { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element AppliedNumberingList { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element NumberingFormat { 
      (enum_type, NumberingStyle_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element NumberingRestartPolicies { 
      attribute RestartPolicy { RestartPolicy_EnumValue },
      attribute LowerLevel { xsd:int },
      attribute UpperLevel { xsd:int }
    }?
  }
  ?
}

DictionaryPreference_Object = element DictionaryPreference {
  attribute Composition { ComposeUsing_EnumValue }?,
  attribute MergeUserDictionary { xsd:boolean }?,
  attribute RecomposeWhenChanged { xsd:boolean }?
}

StoryPreference_Object = element StoryPreference {
  attribute OpticalMarginAlignment { xsd:boolean }?,
  attribute OpticalMarginSize { xsd:double {minInclusive="0.1" maxInclusive="1296"} }?,
  attribute FrameType { FrameTypes_EnumValue }?,
  attribute StoryOrientation { StoryHorizontalOrVertical_EnumValue }?,
  attribute StoryDirection { StoryDirectionOptions_EnumValue }?
}

AnchoredObjectDefault_Object = element AnchoredObjectDefault {
  attribute AnchorContent { ContentType_EnumValue }?,
  attribute InitialAnchorHeight { xsd:double }?,
  attribute InitialAnchorWidth { xsd:double }?,
  attribute AnchoredParagraphStyle { xsd:string }?,
  attribute AnchoredObjectStyle { xsd:string }?
}

AnchoredObjectSetting_Object = element AnchoredObjectSetting {
  attribute AnchoredPosition { AnchorPosition_EnumValue }?,
  attribute SpineRelative { xsd:boolean }?,
  attribute LockPosition { xsd:boolean }?,
  attribute PinPosition { xsd:boolean }?,
  attribute AnchorPoint { AnchorPoint_EnumValue }?,
  attribute HorizontalAlignment { HorizontalAlignment_EnumValue }?,
  attribute HorizontalReferencePoint { AnchoredRelativeTo_EnumValue }?,
  attribute VerticalAlignment { VerticalAlignment_EnumValue }?,
  attribute VerticalReferencePoint { VerticallyRelativeTo_EnumValue }?,
  attribute AnchorXoffset { xsd:double }?,
  attribute AnchorYoffset { xsd:double }?,
  attribute AnchorSpaceAbove { xsd:double }?
}

BaselineFrameGridOption_Object = element BaselineFrameGridOption {
  attribute UseCustomBaselineFrameGrid { xsd:boolean }?,
  attribute StartingOffsetForBaselineFrameGrid { xsd:double {minInclusive="0" maxInclusive="8640"} }?,
  attribute BaselineFrameGridRelativeOption { BaselineFrameGridRelativeOption_EnumValue }?,
  attribute BaselineFrameGridIncrement { xsd:double {minInclusive="1" maxInclusive="8640"} }?,
  element Properties {
    element BaselineFrameGridColor { InDesignUIColorType_TypeDef }?
  }
  ?
}

FootnoteOption_Object = element FootnoteOption {
  attribute StartAt { xsd:int {minInclusive="1" maxInclusive="100000"} }?,
  attribute Prefix { xsd:string }?,
  attribute Suffix { xsd:string }?,
  attribute FootnoteTextStyle { xsd:string }?,
  attribute FootnoteMarkerStyle { xsd:string }?,
  attribute SeparatorText { xsd:string }?,
  attribute SpaceBetween { xsd:double {minInclusive="0" maxInclusive="864"} }?,
  attribute Spacer { xsd:double {minInclusive="0" maxInclusive="864"} }?,
  attribute FootnoteFirstBaselineOffset { FootnoteFirstBaseline_EnumValue }?,
  attribute FootnoteMinimumFirstBaselineOffset { xsd:double {minInclusive="0" maxInclusive="103680"} }?,
  attribute EosPlacement { xsd:boolean }?,
  attribute NoSplitting { xsd:boolean }?,
  attribute RuleOn { xsd:boolean }?,
  attribute RuleLineWeight { xsd:double {minInclusive="0" maxInclusive="1000"} }?,
  attribute RuleTint { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute RuleGapTint { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute RuleGapOverprint { xsd:boolean }?,
  attribute RuleOverprint { xsd:boolean }?,
  attribute RuleLeftIndent { xsd:double {minInclusive="-103680" maxInclusive="103680"} }?,
  attribute RuleWidth { xsd:double {minInclusive="0" maxInclusive="103680"} }?,
  attribute RuleOffset { xsd:double {minInclusive="-15552" maxInclusive="15552"} }?,
  attribute ContinuingRuleOn { xsd:boolean }?,
  attribute ContinuingRuleLineWeight { xsd:double {minInclusive="0" maxInclusive="1000"} }?,
  attribute ContinuingRuleTint { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute ContinuingRuleGapTint { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute ContinuingRuleOverprint { xsd:boolean }?,
  attribute ContinuingRuleGapOverprint { xsd:boolean }?,
  attribute ContinuingRuleLeftIndent { xsd:double {minInclusive="-103680" maxInclusive="103680"} }?,
  attribute ContinuingRuleWidth { xsd:double {minInclusive="0" maxInclusive="103680"} }?,
  attribute ContinuingRuleOffset { xsd:double {minInclusive="-15552" maxInclusive="15552"} }?,
  element Properties {
    element FootnoteNumberingStyle { 
      (enum_type, FootnoteNumberingStyle_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element RestartNumbering { 
      (enum_type, FootnoteRestarting_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element ShowPrefixSuffix { 
      (enum_type, FootnotePrefixSuffix_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element MarkerPositioning { 
      (enum_type, FootnoteMarkerPositioning_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element RuleType { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RuleColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RuleGapColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element ContinuingRuleType { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element ContinuingRuleColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element ContinuingRuleGapColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?
  }
  ?
}

TextWrapPreference_Object = element TextWrapPreference {
  attribute Inverse { xsd:boolean }?,
  attribute ApplyToMasterPageOnly { xsd:boolean }?,
  attribute TextWrapSide { TextWrapSideOptions_EnumValue }?,
  attribute TextWrapMode { TextWrapModes_EnumValue }?,
  element Properties {
    element TextWrapOffset { UnitRectangleBoundsType_TypeDef }?&
    element PathGeometry { element GeometryPathType { GeometryPathType_TypeDef }* 
    }?
  }
  ?
  ,
(
  ContourOption_Object?
)
}

ContourOption_Object = element ContourOption {
  attribute ContourType { ContourOptionsTypes_EnumValue }?,
  attribute IncludeInsideEdges { xsd:boolean }?,
  attribute ContourPathName { xsd:string }?
}

DocumentPreference_Object = element DocumentPreference {
  attribute PageHeight { xsd:double }?,
  attribute PageWidth { xsd:double }?,
  attribute PagesPerDocument { xsd:int }?,
  attribute FacingPages { xsd:boolean }?,
  attribute DocumentBleedTopOffset { xsd:double }?,
  attribute DocumentBleedBottomOffset { xsd:double }?,
  attribute DocumentBleedInsideOrLeftOffset { xsd:double }?,
  attribute DocumentBleedOutsideOrRightOffset { xsd:double }?,
  attribute DocumentBleedUniformSize { xsd:boolean }?,
  attribute SlugTopOffset { xsd:double }?,
  attribute SlugBottomOffset { xsd:double }?,
  attribute SlugInsideOrLeftOffset { xsd:double }?,
  attribute SlugRightOrOutsideOffset { xsd:double }?,
  attribute DocumentSlugUniformSize { xsd:boolean }?,
  attribute PreserveLayoutWhenShuffling { xsd:boolean }?,
  attribute AllowPageShuffle { xsd:boolean }?,
  attribute OverprintBlack { xsd:boolean }?,
  attribute ColumnGuideLocked { xsd:boolean }?,
  attribute Intent { DocumentIntentOptions_EnumValue }?,
  attribute PageBinding { PageBindingOptions_EnumValue }?,
  attribute ColumnDirection { HorizontalOrVertical_EnumValue }?,
  attribute MasterTextFrame { xsd:boolean }?,
  attribute SnippetImportUsesOriginalLocation { xsd:boolean }?,
  element Properties {
    element ColumnGuideColor { InDesignUIColorType_TypeDef }?&
    element MarginGuideColor { InDesignUIColorType_TypeDef }?
  }
  ?
}

GridPreference_Object = element GridPreference {
  attribute DocumentGridShown { xsd:boolean }?,
  attribute DocumentGridSnapto { xsd:boolean }?,
  attribute HorizontalGridlineDivision { xsd:double {minInclusive="0.01" maxInclusive="1000"} }?,
  attribute VerticalGridlineDivision { xsd:double {minInclusive="0.01" maxInclusive="1000"} }?,
  attribute HorizontalGridSubdivision { xsd:int {minInclusive="1" maxInclusive="1000"} }?,
  attribute VerticalGridSubdivision { xsd:int {minInclusive="1" maxInclusive="1000"} }?,
  attribute GridsInBack { xsd:boolean }?,
  attribute BaselineGridShown { xsd:boolean }?,
  attribute BaselineStart { xsd:double {minInclusive="0" maxInclusive="1000"} }?,
  attribute BaselineDivision { xsd:double {minInclusive="1" maxInclusive="8640"} }?,
  attribute BaselineViewThreshold { xsd:double {minInclusive="5" maxInclusive="4000"} }?,
  attribute BaselineGridRelativeOption { BaselineGridRelativeOption_EnumValue }?,
  element Properties {
    element GridColor { InDesignUIColorType_TypeDef }?&
    element BaselineColor { InDesignUIColorType_TypeDef }?
  }
  ?
}

GuidePreference_Object = element GuidePreference {
  attribute GuidesInBack { xsd:boolean }?,
  attribute GuidesShown { xsd:boolean }?,
  attribute GuidesLocked { xsd:boolean }?,
  attribute GuidesSnapto { xsd:boolean }?,
  attribute RulerGuidesViewThreshold { xsd:double }?,
  element Properties {
    element RulerGuidesColor { InDesignUIColorType_TypeDef }?
  }
  ?
}

MarginPreference_Object = element MarginPreference {
  attribute ColumnCount { xsd:int {minInclusive="1" maxInclusive="216"} }?,
  attribute ColumnGutter { xsd:double {minInclusive="0" maxInclusive="1440"} }?,
  attribute Top { xsd:double }?,
  attribute Bottom { xsd:double }?,
  attribute Left { xsd:double }?,
  attribute Right { xsd:double }?,
  attribute ColumnDirection { HorizontalOrVertical_EnumValue }?,
  attribute ColumnsPositions { list { xsd:double * } }?
}

PasteboardPreference_Object = element PasteboardPreference {
  attribute PasteboardMargins { list { xsd:double ,xsd:double } }?,
  attribute MinimumSpaceAboveAndBelow { xsd:double }?,
  element Properties {
    element PreviewBackgroundColor { InDesignUIColorType_TypeDef }?&
    element BleedGuideColor { InDesignUIColorType_TypeDef }?&
    element SlugGuideColor { InDesignUIColorType_TypeDef }?
  }
  ?
}

ViewPreference_Object = element ViewPreference {
  attribute PointsPerInch { xsd:double {minInclusive="60" maxInclusive="80"} }?,
  attribute HorizontalCustomPoints { xsd:double {minInclusive="4" maxInclusive="256"} }?,
  attribute VerticalCustomPoints { xsd:double {minInclusive="4" maxInclusive="256"} }?,
  attribute StrokeMeasurementUnits { MeasurementUnits_EnumValue }?,
  attribute GuideSnaptoZone { xsd:int {minInclusive="1" maxInclusive="36"} }?,
  attribute CursorKeyIncrement { xsd:double {minInclusive="0.001" maxInclusive="100"} }?,
  attribute HorizontalMeasurementUnits { MeasurementUnits_EnumValue }?,
  attribute VerticalMeasurementUnits { MeasurementUnits_EnumValue }?,
  attribute RulerOrigin { RulerOrigin_EnumValue }?,
  attribute ShowRulers { xsd:boolean }?,
  attribute ShowFrameEdges { xsd:boolean }?,
  attribute LineMeasurementUnits { MeasurementUnits_EnumValue }?,
  attribute TypographicMeasurementUnits { MeasurementUnits_EnumValue }?,
  attribute TextSizeMeasurementUnits { MeasurementUnits_EnumValue }?,
  attribute PrintDialogMeasurementUnits { MeasurementUnits_EnumValue }?,
  attribute ShowNotes { xsd:boolean }?
}

PrintPreference_Object = element PrintPreference {
  attribute PrintFile { xsd:string }?,
  attribute Copies { xsd:int }?,
  attribute Collating { xsd:boolean }?,
  attribute ReverseOrder { xsd:boolean }?,
  attribute Sequence { Sequences_EnumValue }?,
  attribute PrintSpreads { xsd:boolean }?,
  attribute PrintMasterPages { xsd:boolean }?,
  attribute PrintNonprinting { xsd:boolean }?,
  attribute PrintBlankPages { xsd:boolean }?,
  attribute PrintGuidesGrids { xsd:boolean }?,
  attribute PaperOffset { xsd:double }?,
  attribute PaperGap { xsd:double }?,
  attribute PaperTransverse { xsd:boolean }?,
  attribute PrintPageOrientation { PrintPageOrientation_EnumValue }?,
  attribute PagePosition { PagePositions_EnumValue }?,
  attribute ScaleMode { ScaleModes_EnumValue }?,
  attribute ScaleWidth { xsd:double }?,
  attribute ScaleHeight { xsd:double }?,
  attribute ScaleProportional { xsd:boolean }?,
  attribute Thumbnails { xsd:boolean }?,
  attribute ThumbnailsPerPage { ThumbsPerPage_EnumValue }?,
  attribute Tile { xsd:boolean }?,
  attribute TilingType { TilingTypes_EnumValue }?,
  attribute TilingOverlap { xsd:double }?,
  attribute AllPrinterMarks { xsd:boolean }?,
  attribute CropMarks { xsd:boolean }?,
  attribute BleedMarks { xsd:boolean }?,
  attribute RegistrationMarks { xsd:boolean }?,
  attribute ColorBars { xsd:boolean }?,
  attribute PageInformationMarks { xsd:boolean }?,
  attribute MarkLineWeight { MarkLineWeight_EnumValue }?,
  attribute MarkOffset { xsd:double }?,
  attribute UseDocumentBleedToPrint { xsd:boolean }?,
  attribute BleedTop { xsd:double {minInclusive="0" maxInclusive="432"} }?,
  attribute BleedBottom { xsd:double {minInclusive="0" maxInclusive="432"} }?,
  attribute BleedInside { xsd:double {minInclusive="0" maxInclusive="432"} }?,
  attribute BleedOutside { xsd:double {minInclusive="0" maxInclusive="432"} }?,
  attribute IncludeSlugToPrint { xsd:boolean }?,
  attribute ColorOutput { ColorOutputModes_EnumValue }?,
  attribute TextAsBlack { xsd:boolean }?,
  attribute Trapping { Trapping_EnumValue }?,
  attribute Flip { Flip_EnumValue }?,
  attribute Negative { xsd:boolean }?,
  attribute CompositeAngle { xsd:double }?,
  attribute CompositeFrequency { xsd:double }?,
  attribute SimulateOverprint { xsd:boolean }?,
  attribute PrintCyan { xsd:boolean }?,
  attribute CyanAngle { xsd:double }?,
  attribute CyanFrequency { xsd:double }?,
  attribute PrintMagenta { xsd:boolean }?,
  attribute MagentaAngle { xsd:double }?,
  attribute MagentaFrequency { xsd:double }?,
  attribute PrintYellow { xsd:boolean }?,
  attribute YellowAngle { xsd:double }?,
  attribute YellowFrequency { xsd:double }?,
  attribute PrintBlack { xsd:boolean }?,
  attribute BlackAngle { xsd:double }?,
  attribute BlackFrequency { xsd:double }?,
  attribute SendImageData { ImageDataTypes_EnumValue }?,
  attribute FontDownloading { FontDownloading_EnumValue }?,
  attribute DownloadPPDFonts { xsd:boolean }?,
  attribute PostScriptLevel { PostScriptLevels_EnumValue }?,
  attribute DataFormat { DataFormat_EnumValue }?,
  attribute SourceSpace { SourceSpaces_EnumValue }?,
  attribute Intent { RenderingIntent_EnumValue }?,
  attribute OPIImageReplacement { xsd:boolean }?,
  attribute OmitEPS { xsd:boolean }?,
  attribute OmitPDF { xsd:boolean }?,
  attribute OmitBitmaps { xsd:boolean }?,
  attribute FlattenerPresetName { xsd:string }?,
  attribute IgnoreSpreadOverrides { xsd:boolean }?,
  attribute BleedChain { xsd:boolean }?,
  attribute PreserveColorNumbers { xsd:boolean }?,
  attribute BitmapPrinting { xsd:boolean }?,
  attribute BitmapResolution { xsd:int {minInclusive="72" maxInclusive="1200"} }?,
  attribute PrintLayers { PrintLayerOptions_EnumValue }?,
  attribute DeviceType { xsd:int }?,
  attribute PrintTo { xsd:int }?,
  attribute PPDFile { xsd:string }?,
  attribute PrintToDisk { xsd:boolean }?,
  attribute PrintRecord { xsd:string }?,
  attribute PrintResolution { xsd:double }?,
  attribute PaperSizeSelector { xsd:string }?,
  attribute PaperHeightRange { list { xsd:double ,xsd:double } }?,
  attribute PaperWidthRange { list { xsd:double ,xsd:double } }?,
  attribute PaperOffsetRange { list { xsd:double ,xsd:double } }?,
  attribute SeparationScreening { xsd:string }?,
  attribute CompositeScreening { xsd:string }?,
  attribute SpotAngle { xsd:double }?,
  attribute SpotFrequency { xsd:double }?,
  element Properties {
    element ActivePrinterPreset { 
      (enum_type, PrinterPresetTypes_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element Printer { 
      (enum_type, Printer_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element PPD { 
      (enum_type, PPDValues_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element PaperSize { 
      (enum_type, PaperSizes_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element PaperHeight { 
      (enum_type, PaperSize_EnumValue ) |
      (unit_type, xsd:double )
    }?&
    element PaperWidth { 
      (enum_type, PaperSize_EnumValue ) |
      (unit_type, xsd:double )
    }?&
    element MarkType { 
      (enum_type, MarkTypes_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element Screening { 
      (enum_type, Screeening_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element Profile { 
      (enum_type, Profile_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element CRD { 
      (enum_type, ColorRenderingDictionary_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element PageRange { 
      (enum_type, PageRange_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element PaperSizeRect { RectangleBoundsType_TypeDef }?&
    element ImageablePaperSizeRect { RectangleBoundsType_TypeDef }?
  }
  ?
}

PrintBookletOption_Object = element PrintBookletOption {
  attribute BookletType { BookletTypeOptions_EnumValue }?,
  attribute SpaceBetweenPages { xsd:double {minInclusive="0" maxInclusive="288"} }?,
  attribute BleedBetweenPages { xsd:double {minInclusive="0" maxInclusive="144"} }?,
  attribute Creep { xsd:double {minInclusive="-144" maxInclusive="144"} }?,
  attribute SignatureSize { SignatureSizeOptions_EnumValue }?,
  attribute TopMargin { xsd:double {minInclusive="0" maxInclusive="288"} }?,
  attribute BottomMargin { xsd:double {minInclusive="0" maxInclusive="288"} }?,
  attribute LeftMargin { xsd:double {minInclusive="0" maxInclusive="288"} }?,
  attribute RightMargin { xsd:double {minInclusive="0" maxInclusive="288"} }?,
  attribute AutoAdjustMargins { xsd:boolean }?,
  attribute MarginsUniformSize { xsd:boolean }?,
  attribute PrintBlankPrinterSpreads { xsd:boolean }?,
  element Properties {
    element PageRange { 
      (enum_type, PageRange_EnumValue ) |
      (string_type, xsd:string )
    }?
  }
  ?
}

PrintBookletPrintPreference_Object = element PrintBookletPrintPreference {
  attribute PrinterList { list { xsd:string * } }?,
  attribute PPDList { list { xsd:string * } }?,
  attribute PaperSizeList { list { xsd:string * } }?,
  attribute ScreeningList { list { xsd:string * } }?,
  attribute PrintFile { xsd:string }?,
  attribute Copies { xsd:int }?,
  attribute Collating { xsd:boolean }?,
  attribute ReverseOrder { xsd:boolean }?,
  attribute PrintNonprinting { xsd:boolean }?,
  attribute PrintBlankPages { xsd:boolean }?,
  attribute PrintGuidesGrids { xsd:boolean }?,
  attribute PaperOffset { xsd:double }?,
  attribute PaperGap { xsd:double }?,
  attribute PaperTransverse { xsd:boolean }?,
  attribute PrintPageOrientation { PrintPageOrientation_EnumValue }?,
  attribute PagePosition { PagePositions_EnumValue }?,
  attribute ScaleMode { ScaleModes_EnumValue }?,
  attribute ScaleWidth { xsd:double }?,
  attribute ScaleHeight { xsd:double }?,
  attribute ScaleProportional { xsd:boolean }?,
  attribute PrintLayers { PrintLayerOptions_EnumValue }?,
  attribute AllPrinterMarks { xsd:boolean }?,
  attribute CropMarks { xsd:boolean }?,
  attribute BleedMarks { xsd:boolean }?,
  attribute RegistrationMarks { xsd:boolean }?,
  attribute ColorBars { xsd:boolean }?,
  attribute PageInformationMarks { xsd:boolean }?,
  attribute MarkLineWeight { MarkLineWeight_EnumValue }?,
  attribute MarkOffset { xsd:double }?,
  attribute UseDocumentBleedToPrint { xsd:boolean }?,
  attribute BleedTop { xsd:double {minInclusive="0" maxInclusive="432"} }?,
  attribute BleedBottom { xsd:double {minInclusive="0" maxInclusive="432"} }?,
  attribute BleedInside { xsd:double {minInclusive="0" maxInclusive="432"} }?,
  attribute BleedOutside { xsd:double {minInclusive="0" maxInclusive="432"} }?,
  attribute BleedChain { xsd:boolean }?,
  attribute ColorOutput { ColorOutputModes_EnumValue }?,
  attribute TextAsBlack { xsd:boolean }?,
  attribute Trapping { Trapping_EnumValue }?,
  attribute Flip { Flip_EnumValue }?,
  attribute Negative { xsd:boolean }?,
  attribute CompositeAngle { xsd:double }?,
  attribute CompositeFrequency { xsd:double }?,
  attribute SimulateOverprint { xsd:boolean }?,
  attribute PrintCyan { xsd:boolean }?,
  attribute CyanAngle { xsd:double }?,
  attribute CyanFrequency { xsd:double }?,
  attribute PrintMagenta { xsd:boolean }?,
  attribute MagentaAngle { xsd:double }?,
  attribute MagentaFrequency { xsd:double }?,
  attribute PrintYellow { xsd:boolean }?,
  attribute YellowAngle { xsd:double }?,
  attribute YellowFrequency { xsd:double }?,
  attribute PrintBlack { xsd:boolean }?,
  attribute BlackAngle { xsd:double }?,
  attribute BlackFrequency { xsd:double }?,
  attribute SendImageData { ImageDataTypes_EnumValue }?,
  attribute FontDownloading { FontDownloading_EnumValue }?,
  attribute DownloadPPDFonts { xsd:boolean }?,
  attribute PostScriptLevel { PostScriptLevels_EnumValue }?,
  attribute DataFormat { DataFormat_EnumValue }?,
  attribute SourceSpace { SourceSpaces_EnumValue }?,
  attribute Intent { RenderingIntent_EnumValue }?,
  attribute PreserveColorNumbers { xsd:boolean }?,
  attribute OPIImageReplacement { xsd:boolean }?,
  attribute OmitEPS { xsd:boolean }?,
  attribute OmitPDF { xsd:boolean }?,
  attribute OmitBitmaps { xsd:boolean }?,
  attribute FlattenerPresetName { xsd:string }?,
  attribute IgnoreSpreadOverrides { xsd:boolean }?,
  attribute BitmapPrinting { xsd:boolean }?,
  attribute BitmapResolution { xsd:int {minInclusive="72" maxInclusive="1200"} }?,
  attribute DeviceType { xsd:int }?,
  attribute PrintTo { xsd:int }?,
  attribute PPDFile { xsd:string }?,
  attribute PrintToDisk { xsd:boolean }?,
  attribute PrintRecord { xsd:string }?,
  attribute PrintResolution { xsd:double }?,
  attribute PaperSizeSelector { xsd:string }?,
  attribute PaperHeightRange { list { xsd:double ,xsd:double } }?,
  attribute PaperWidthRange { list { xsd:double ,xsd:double } }?,
  attribute PaperOffsetRange { list { xsd:double ,xsd:double } }?,
  attribute SeparationScreening { xsd:string }?,
  attribute CompositeScreening { xsd:string }?,
  attribute SpotAngle { xsd:double }?,
  attribute SpotFrequency { xsd:double }?,
  element Properties {
    element Printer { 
      (enum_type, Printer_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element PPD { 
      (enum_type, PPDValues_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element PaperSize { 
      (enum_type, PaperSizes_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element PaperHeight { 
      (enum_type, PaperSize_EnumValue ) |
      (unit_type, xsd:double )
    }?&
    element PaperWidth { 
      (enum_type, PaperSize_EnumValue ) |
      (unit_type, xsd:double )
    }?&
    element MarkType { 
      (enum_type, MarkTypes_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element Screening { 
      (enum_type, Screeening_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element Profile { 
      (enum_type, Profile_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element CRD { 
      (enum_type, ColorRenderingDictionary_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element ActivePrinterPreset { 
      (enum_type, PrinterPresetTypes_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element PaperSizeRect { RectangleBoundsType_TypeDef }?&
    element ImageablePaperSizeRect { RectangleBoundsType_TypeDef }?
  }
  ?
}

IndexOptions_Object = element IndexOptions {
  attribute Title { xsd:string }?,
  attribute TitleStyle { xsd:string }?,
  attribute ReplaceExistingIndex { xsd:boolean }?,
  attribute IncludeBookDocuments { xsd:boolean }?,
  attribute IncludeHiddenEntries { xsd:boolean }?,
  attribute IndexFormat { IndexFormat_EnumValue }?,
  attribute IncludeSectionHeadings { xsd:boolean }?,
  attribute IncludeEmptyIndexSections { xsd:boolean }?,
  attribute Level1Style { xsd:string }?,
  attribute Level2Style { xsd:string }?,
  attribute Level3Style { xsd:string }?,
  attribute Level4Style { xsd:string }?,
  attribute SectionHeadingStyle { xsd:string }?,
  attribute PageNumberStyle { xsd:string }?,
  attribute CrossReferenceStyle { xsd:string }?,
  attribute CrossReferenceTopicStyle { xsd:string }?,
  attribute FollowingTopicSeparator { xsd:string }?,
  attribute BetweenEntriesSeparator { xsd:string }?,
  attribute PageRangeSeparator { xsd:string }?,
  attribute BetweenPageNumbersSeparator { xsd:string }?,
  attribute BeforeCrossReferenceSeparator { xsd:string }?,
  attribute EntryEndSeparator { xsd:string }?
}

IndexHeaderSetting_Object = element IndexHeaderSetting {
  attribute HeaderSetName { xsd:string }?,
  attribute HeaderSetLanguage { xsd:int }?,
  attribute IndexHeaderSetHandler { xsd:int }?,
  attribute IndexHeaderSetGroupValue { xsd:int }?,
  attribute IndexHeaderSetGroupOptionValue { xsd:int }?,
  element Properties {
    element ListOfIndexHeaderGroup { element IndexHeaderGroupType { IndexHeaderGroupType_TypeDef }* 
    }?
  }
  ?
}

PageItemDefault_Object = element PageItemDefault {
  attribute TopLeftCornerOption { CornerOptions_EnumValue }?,
  attribute TopRightCornerOption { CornerOptions_EnumValue }?,
  attribute BottomLeftCornerOption { CornerOptions_EnumValue }?,
  attribute BottomRightCornerOption { CornerOptions_EnumValue }?,
  attribute TopLeftCornerRadius { xsd:double }?,
  attribute TopRightCornerRadius { xsd:double }?,
  attribute BottomLeftCornerRadius { xsd:double }?,
  attribute BottomRightCornerRadius { xsd:double }?,
  attribute AppliedGraphicObjectStyle { xsd:string }?,
  attribute AppliedTextObjectStyle { xsd:string }?,
  attribute AppliedGridObjectStyle { xsd:string }?,
  attribute CornerOption { CornerOptions_EnumValue }?,
  attribute CornerRadius { xsd:double }?,
  attribute FillColor { xsd:string }?,
  attribute FillTint { xsd:double }?,
  attribute StrokeWeight { xsd:double }?,
  attribute MiterLimit { xsd:double {minInclusive="1" maxInclusive="500"} }?,
  attribute EndCap { EndCap_EnumValue }?,
  attribute EndJoin { EndJoin_EnumValue }?,
  attribute StrokeType { xsd:string }?,
  attribute LeftLineEnd { ArrowHead_EnumValue }?,
  attribute RightLineEnd { ArrowHead_EnumValue }?,
  attribute StrokeColor { xsd:string }?,
  attribute StrokeTint { xsd:double }?,
  attribute GradientFillAngle { xsd:double }?,
  attribute GradientStrokeAngle { xsd:double }?,
  attribute OverprintStroke { xsd:boolean }?,
  attribute OverprintFill { xsd:boolean }?,
  attribute GapColor { xsd:string }?,
  attribute GapTint { xsd:double }?,
  attribute OverprintGap { xsd:boolean }?,
  attribute StrokeAlignment { StrokeAlignment_EnumValue }?,
  attribute Nonprinting { xsd:boolean }?,
(
  TransparencySetting_Object?&
  StrokeTransparencySetting_Object?&
  FillTransparencySetting_Object?&
  ContentTransparencySetting_Object?
)
}

FrameFittingOption_Object = element FrameFittingOption {
  attribute AutoFit { xsd:boolean }?,
  attribute LeftCrop { xsd:double }?,
  attribute TopCrop { xsd:double }?,
  attribute RightCrop { xsd:double }?,
  attribute BottomCrop { xsd:double }?,
  attribute FittingOnEmptyFrame { EmptyFrameFittingOptions_EnumValue }?,
  attribute FittingAlignment { AnchorPoint_EnumValue }?
}

ButtonPreference_Object = element ButtonPreference {
  attribute Name { xsd:string }?
}

TinDocumentDataObject_Object = element TinDocumentDataObject {
  element Properties {
    element GaijiRefMaps { text }?
  }
  ?
}

LayoutGridDataInformation_Object = element LayoutGridDataInformation {
  attribute FontStyle { xsd:string }?,
  attribute PointSize { xsd:double }?,
  attribute CharacterAki { xsd:double }?,
  attribute LineAki { xsd:double }?,
  attribute HorizontalScale { xsd:double }?,
  attribute VerticalScale { xsd:double }?,
  element Properties {
    element AppliedFont { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?
  }
  ?
}

StoryGridDataInformation_Object = element StoryGridDataInformation {
  attribute FontStyle { xsd:string }?,
  attribute PointSize { xsd:double }?,
  attribute CharacterAki { xsd:double }?,
  attribute LineAki { xsd:double }?,
  attribute HorizontalScale { xsd:double }?,
  attribute VerticalScale { xsd:double }?,
  attribute LineAlignment { LineAlignment_EnumValue }?,
  attribute GridAlignment { GridAlignment_EnumValue }?,
  attribute CharacterAlignment { CharacterAlignment_EnumValue }?,
  attribute GridView { GridViewSettings_EnumValue }?,
  attribute CharacterCountLocation { CharacterCountLocation_EnumValue }?,
  attribute CharacterCountSize { xsd:double }?,
  element Properties {
    element AppliedFont { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?
  }
  ?
}

CjkGridPreference_Object = element CjkGridPreference {
  attribute ShowAllLayoutGrids { xsd:boolean }?,
  attribute ShowAllFrameGrids { xsd:boolean }?,
  attribute MinimumScale { xsd:double }?,
  attribute SnapToLayoutGrid { xsd:boolean }?,
  attribute ColorEveryNthCell { xsd:short }?,
  attribute SingleLineColorMode { xsd:boolean }?,
  attribute ICFMode { xsd:boolean }?,
  attribute UseCircularCells { xsd:boolean }?,
  attribute ShowCharacterCount { xsd:boolean }?,
  element Properties {
    element LayoutGridColorIndex { InDesignUIColorType_TypeDef }?
  }
  ?
}

MojikumiUiPreference_Object = element MojikumiUiPreference {
  attribute MojikumiUiSettings { xsd:short }?
}

ChapterNumberPreference_Object = element ChapterNumberPreference {
  attribute ChapterNumber { xsd:int }?,
  attribute ChapterNumberSource { ChapterNumberSources_EnumValue }?,
  element Properties {
    element ChapterNumberFormat { 
      (enum_type, NumberingStyle_EnumValue ) |
      (string_type, xsd:string )
    }?
  }
  ?
}


}